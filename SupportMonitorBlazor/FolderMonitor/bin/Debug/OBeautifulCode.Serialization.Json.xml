<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OBeautifulCode.Serialization.Json</name>
    </assembly>
    <members>
        <member name="T:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause">
            <summary>
            Standard justifications for analysis suppression.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA_ALL_SeeOtherSuppressionMessages">
            <summary>
            See the other suppression message(s) applied within the same context.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA_ALL_AgreeWithAssessmentAndNeedsRefactoring">
            <summary>
            We agree with the assessment.  This code needs refactoring but we cannot justify spending time on this right now.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA_ALL_NatureOfTypeNecessitatesIgnoringAllWarnings">
            <summary>
            The nature of this type necessitates that we ignore all warnings.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA_ALL_NotApplicable">
            <summary>
            This warning detects a situation that is not applicable to this code.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1000_DoNotDeclareStaticMembersOnGenericTypes_StaticPropertyReturnsInstanceOfContainingGenericClassAndIsConvenientAndMostDiscoverableWhereDeclared">
            <summary>
            A static property returns an instance of the generic class that contains the property.  The property exists for convenience in creating and configuring the instance.  It is most discoverable where it is, in-context of the class being instantiated.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1002_DoNotExposeGenericLists_GenericListRequiredForTesting">
            <summary>
            A generic list is required in unit tests.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1004_GenericMethodsShouldProvideTypeParameter_OnlyInputsToMethodAreTypesAndItsMoreConciseToCallMethodUseGenericTypeParameters">
            <summary>
            The only input(s) to the method are Types.  It's more concise to call the method using generic types parameters instead of a parameter signature with parameters of type Type (e.g. MyMethod&lt;MyType&gt;() instead of MyMethod(Type myType)).
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1005_AvoidExcessiveParametersOnGenericTypes_SpecifiedParametersRequiredForNeededFunctionality">
            <summary>
            The specified paramters are required to achieve the needed functionality.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1014_MarkAssembliesWithClsCompliant_ConsoleExeDoesNotNeedToBeClsCompliant">
            <summary>
            Console executable does not need the [assembly: CLSCompliant(true)] as it should not be shared as an assembly for reference.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1020_AvoidNamespacesWithFewTypes_OptimizeForLogicalGroupingOfTypes">
            <summary>
            We are optimizing for the logical grouping of types rather than the number of types in a namepace.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1021_AvoidOutParameters_OutParameterRequiredForTryMethod">
            <summary>
            An out parameter is required for a Try...() method that attempts to perform some operation, returning true when successful and setting the out parameter to the result of the operation or returning false and leaving the out parameter uninitialized (e.g. dictionary.TryGetValue(key, int out result) ).
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1027_MarkEnumsWithFlags_EnumValuesArePurposefullyNonContiguous">
            <summary>
            This is not a flags enum.  Enum values are purposefully non-contiguous.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1032_ImplementStandardExceptionConstructors_ExceptionUsedInternallyAndConstructorsEnsureRequiredInfoAvailableWhenCaught">
            <summary>
            This Exception is only used internally and the constructor(s) ensure that when the Exception is caught, it contains the required information.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1034_NestedTypesShouldNotBeVisible_VisibleNestedTypeRequiredForTesting">
            <summary>
            A visible nested type is required in unit tests.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1036_OverrideMethodsOnComparableTypes_TypeCreatedForTestsThatRequireComparableTypeButDoNotUseTypeToPerformComparisons">
            <summary>
            The type exists for unit tests that require a comparable type, but do not use the type to perform any comparisons.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1040_AvoidEmptyInterfaces_NeedToIdentifyGroupOfTypesAndPreferInterfaceOverAttribute">
            <summary>
            When we need to identify a group of types, we prefer the use of an empty interface over an attribute because it's easier to use and results in cleaner code.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1051_DoNotDeclareVisibleInstanceFields_TypeUsedInTestingThatRequiresInstanceFieldToBeVisible">
            <summary>
            The type is used for test code that requires the instance field to be visible.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1054_UriParametersShouldNotBeStrings_PreferToRepresentUrlAsString">
            <summary>
            In this case we prefer to represent the URL as a string.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1056_UriPropertiesShouldNotBeStrings_PreferToRepresentUrlAsString">
            <summary>
            In this case we prefer to represent the URL as a string.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1065_DoNotRaiseExceptionsInUnexpectedLocations_ThrowNotSupportedExceptionForUnreachableCodePath">
            <summary>
            It's ok to throw NotSupportedException for an unreachable code path.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1065_DoNotRaiseExceptionsInUnexpectedLocations_ThrowNotImplementedExceptionWhenForcedToSpecifyMemberThatWillNeverBeUsedInTesting">
            <summary>
            It's ok to throw NotImplementedException when a base type or implementing an interface forces us to create a member that will never be used in testing.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1308_NormalizeStringsToUppercase_PreferGuidLowercase">
            <summary>
            We prefer to read <see cref="T:System.Guid" />'s string representation as lowercase.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1502_AvoidExcessiveComplexity_DisagreeWithAssessment">
            <summary>
            We disagree with the assessment that this method as excessively complex.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1505_AvoidUnmaintainableCode_DisagreeWithAssessment">
            <summary>
            We disagree with the assessment that this code is unmaintainable.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1506_AvoidExcessiveClassCoupling_DisagreeWithAssessment">
            <summary>
            We disagree with the assessment this type or method is excessively coupled.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1702_CompoundWordsShouldBeCasedCorrectly_AnalyzerIsIncorrectlyDetectingCompoundWords">
            <summary>
            The analyzer is incorrectly detecting compound words.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1704_IdentifiersShouldBeSpelledCorrectly_SpellingIsCorrectInContextOfTheDomain">
            <summary>
            The spelling of the identifier is correct in-context of the domain.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1709_IdentifiersShouldBeCasedCorrectly_CasingIsAsPreferred">
            <summary>
            The casing is as preferred.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1710_IdentifiersShouldHaveCorrectSuffix_ExceptionBaseClassShouldEndWithBase">
            <summary>
            An Exception base class should end in 'Base' (as is the convention for all base classes), not 'Exception'.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1710_IdentifiersShouldHaveCorrectSuffix_NameDirectlyExtendedOrImplementedTypeAddedAsSuffixForTestsWhereTypeIsPrimaryConcern">
            <summary>
            The identifier is suffixed with the name of the Type that it directly extends or implements to improves readability and comprehension of unit tests whre the Type is a primary concern of those tests.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1711_IdentifiersShouldNotHaveIncorrectSuffix_TypeNameAddedAsSuffixForTestsWhereTypeIsPrimaryConcern">
            <summary>
            The identifier is suffixed with it's Type name to improve readability and comprehension of unit tests where the Type is a primary concern of those tests.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1714_FlagsEnumsShouldHavePluralNames_TheNameIsPlural">
            <summary>
            The name is plural.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1720_IdentifiersShouldNotContainTypeNames_TypeNameAddsClarityToIdentifierAndNoGoodAlternative">
            <summary>
            The type name adds clarity to the identifier and there is no good alternative.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1720_IdentifiersShouldNotContainTypeNames_TypeNameAddsClarityToIdentifierAndAlternativesDegradeClarity">
            <summary>
            The type name adds clarity to the identifier and the alternatives degrade the clarity of the identifier.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1720_IdentifiersShouldNotContainTypeNames_TypeNameAddedToIdentifierForTestsWhereTypeIsPrimaryConcern">
            <summary>
            The identifier includes it's Type name to improve readability and comprehension of unit tests where the Type is a primary concern of those tests.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1726_UsePreferredTerms_FlagsAddedForTestsWhereEnumKindIsPrimaryConcern">
            <summary>
            The identifier includes 'Flags' to improve readability and comprehension of unit tests where the kind of Enum is a primary concern of those tests.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1726_UsePreferredTerms_NameOfTypeOfIdentifierUsesTheTermFlags">
            <summary>
            The name of the Type of the identifier uses the term 'Flags' and so it's appropriate to use that term in the the name of the identifier.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1804_RemoveUnusedLocals_UsedAsWorkaroundForConditionalBreakpointThatCannotBeSet">
            <summary>
            In some cases, the debugger raises an error because it cannot set a conditional breakpoint.  A local is introduced to simplify the evaluation of the breakpoint's condition.  It's only purpose is to allow a conditional breakpoint in proximity of the breakpoint that cannot be set.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1810_InitializeReferenceTypeStaticFieldsInline_FieldsDeclaredInCodeGeneratedPartialTestClass">
            <summary>
            The static field(s) are declared in a code generated partial test class that should not be alterated.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1811_AvoidUncalledPrivateCode_MethodIsWiredIntoClapAsVerb">
            <summary>
            The method is wired into CLAP, a framework for command-line parsing, as a verb.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1811_AvoidUncalledPrivateCode_PropertyExistsForCompleteness">
            <summary>
            The property exists for completeness.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1812_AvoidUninstantiatedInternalClasses_ClassIsWiredIntoClapInProgramCs">
            <summary>
            The class is wired into CLAP, a framework for command-line parsing, in Program.cs.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1812_AvoidUninstantiatedInternalClasses_SerializationConfigurationClassInstantedBySerializer">
            <summary>
            The class derives from SerializationConfigurationBase and is instantiated by a Serializer that is configured using the type of that class.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1812_AvoidUninstantiatedInternalClasses_ClassExistsToUseItsTypeInUnitTests">
            <summary>
            The class exists because it's Type is used in unit tests.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1815_OverrideEqualsAndOperatorEqualsOnValueTypes_TypeUsedForTestsThatRequireTypeToNotBeEquatable">
            <summary>
            The type is being used in testing and we explicitly do not want the type to be equatable because it has bearing on the tests.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1819_PropertiesShouldNotReturnArrays_DataPayloadsAreCommonlyRepresentedAsByteArrays">
            <summary>
            Data payloads are commonly represented as a byte arrays.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA1819_PropertiesShouldNotReturnArrays_ArrayPropertyRequiredForTesting">
            <summary>
            An array property is required for unit tests.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA2000_DisposeObjectsBeforeLosingScope_DisposableObjectIsMethodReturnObject">
            <summary>
            The disposable object is the method's return object.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA2000_DisposeObjectsBeforeLosingScope_MethodCreatesDisposableObjectButItCannotBeDisposedBecauseReturnObjectRequiresDisposableObjectToBeFullyIntact">
            <summary>
            The method creates a dispoable object, but it cannot be disposed because the return object requires the disposable object to be fully intact.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA2104_DoNotDeclareReadOnlyMutableReferenceTypes_TypeIsImmutable">
            <summary>
            The type is immutable.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA2201_DoNotRaiseReservedExceptionTypes_UsedForUnitTesting">
            <summary>
            The reserved exception is being used in unit test code; there is no real caller that will be impacted.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA2202_DoNotDisposeObjectsMultipleTimes_AnalyzerIsIncorrectlyFlaggingObjectAsBeingDisposedMultipleTimes">
            <summary>
            The analyzer is incorectly flagging an object as being disposed multiple times.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA2214_DoNotCallOverridableMethodsInConstructors_OverriddenMethodDoesNotRelyOnInitializationNorOtherConfigurationInConstructor">
            <summary>
            The overridden method does not relies on initialization nor other configuration in the constructor.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA2227_CollectionPropertiesShouldBeReadOnly_PublicInterfaceNeverExposesTheObject">
            <summary>
            The public interface of the system associated with this object never exposes this object.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA2227_CollectionPropertiesShouldBeReadOnly_SetterIsRequiredForTesting">
            <summary>
            A setter is required for unit tests.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA2237_MarkISerializableTypesWithSerializable_UsedForTestingWithNoIntentionToSerialize">
            <summary>
            The type is used in unit tests with no intention to serialize.
            </summary>
        </member>
        <member name="F:OBeautifulCode.CodeAnalysis.Recipes.ObcSuppressBecause.CA2237_MarkISerializableTypesWithSerializable_ExceptionOnlyUsedInternallyAndWillNeverBeSerialized">
            <summary>
            The Exception is only used internally; it will never be serialized.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Collection.Recipes.CollectionExtensions">
            <summary>
            Helper methods for operating on objects of type <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Collection.Recipes.CollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified <see cref="T:System.Collections.IEnumerable"/> to an <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
            <param name="collection">The collection to add to.</param>
            <param name="valuesToAdd">
            The <see cref="T:System.Collections.IEnumerable"/> whose elements should be added to the <see cref="T:System.Collections.ICollection"/>.
            The <see cref="T:System.Collections.IEnumerable"/> itself cannot be a null reference, but it can contain elements that are a null reference.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="valuesToAdd"/> is null.</exception>
        </member>
        <member name="T:OBeautifulCode.Collection.Recipes.EnumerableExtensions">
            <summary>
            Helper methods for operating on objects of type <see cref="T:System.Collections.IEnumerable"/> and <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Collection.Recipes.EnumerableExtensions.GetCombinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Gets all combinations of items in a specified set of items.
            </summary>
            <remarks>
            Adapted from <a href="https://stackoverflow.com/a/41642733/356790" />.
            </remarks>
            <typeparam name="T">The type of items in the set.</typeparam>
            <param name="values">The set of values.</param>
            <param name="minimumItems">Optional minimum number of items in each combination.  Default is 1.</param>
            <param name="maximumItems">Optional maximum number of items in each combination.  Default is no maximum limit.</param>
            <returns>
            All possible combinations for the input set, constrained by the specified <paramref name="maximumItems"/> and <paramref name="minimumItems"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minimumItems"/> is less than 1.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maximumItems"/> is less than <paramref name="minimumItems"/>"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Collection.Recipes.EnumerableExtensions.GetLongestCommonPrefix(System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Gets the longest string that is a prefix of all of the specified strings.
            </summary>
            <remarks>
            Adapted from: <a href="https://stackoverflow.com/a/58265152/356790" />.
            </remarks>
            <param name="values">The value to evaluate for a common prefix.</param>
            <returns>
            The longest string that is a prefix of all of the specified strings.
            If any value is null, returns null as the common prefix.
            Otherwise, if there is no common prefix, returns an empty string.
            If only one value is specified, then the value itself is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="values"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="values"/> is empty.</exception>
        </member>
        <member name="M:OBeautifulCode.Collection.Recipes.EnumerableExtensions.RandomizeElements``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Puts the elements of a specified enumerable into a new enumerable, in random order.
            </summary>
            <param name="value">The enumerable.</param>
            <returns>
            A new enumerable having all of the elements of the specified enumerable, but in random order.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Collection.Recipes.EnumerableExtensions.SymmetricDifference(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Gets the symmetric difference of two sets using the default equality comparer.
            The symmetric difference is defined as the set of elements which are in one of the sets, but not in both.
            </summary>
            <remarks>
            If one set has duplicate items when evaluated using the comparer, then the resulting symmetric difference will only
            contain one copy of the the duplicate item and only if it doesn't appear in the other set.
            </remarks>
            <param name="value">The first enumerable.</param>
            <param name="secondSet">The second enumerable to compare against the first.</param>
            <returns>IEnumerable(T) with the symmetric difference of the two sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="secondSet"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Collection.Recipes.EnumerableExtensions.SymmetricDifference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Gets the symmetric difference of two sets using an equality comparer.
            The symmetric difference is defined as the set of elements which are in one of the sets, but not in both.
            </summary>
            <remarks>
            If one set has duplicate items when evaluated using the comparer, then the resulting symmetric difference will only
            contain one copy of the the duplicate item and only if it doesn't appear in the other set.
            </remarks>
            <typeparam name="TSource">The type of elements in the collection.</typeparam>
            <param name="value">The first enumerable.</param>
            <param name="secondSet">The second enumerable to compare against the first.</param>
            <param name="comparer">Optional equality comparer to use to compare elements.  Default is to call <see cref="M:OBeautifulCode.Equality.Recipes.EqualityComparerHelper.GetEqualityComparerToUse``1(System.Collections.Generic.IEqualityComparer{``0})"/>.</param>
            <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the symmetric difference of the two sets.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="secondSet"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Collection.Recipes.EnumerableExtensions.ToCsv(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a common separated values (CSV) string from the individual strings in an <see cref="T:System.Collections.IEnumerable"/>,
            making CSV treatments where needed (double quotes around strings with commas, etc.).
            </summary>
            <param name="value">The enumerable to transform into a CSV string.</param>
            <param name="nullValueEncoding">Optional value to use when encoding null elements.  Defaults to the empty string.</param>
            <remarks>
            CSV treatments: <a href="http://en.wikipedia.org/wiki/Comma-separated_values"/>.
            </remarks>
            <returns>
            Returns a string that contains each element in the input enumerable,
            separated by a comma and with the proper escaping.
            If the enumerable is empty, returns null.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Collection.Recipes.EnumerableExtensions.ToDelimitedString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Concatenates the individual values in an <see cref="T:System.Collections.IEnumerable"/> with a given delimiter
            separating the individual values.
            </summary>
            <param name="value">The enumerable to concatenate.</param>
            <param name="delimiter">The delimiter to use between elements in the enumerable.</param>
            <remarks>
            If an element of the IEnumerable is null, then its treated like an empty string.
            </remarks>
            <returns>
            Returns a string that contains each element in the input enumerable, separated by the given delimiter.
            If the enumerable is empty, then this method returns null.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="delimiter"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Collection.Recipes.EnumerableExtensions.ToNewLineDelimited(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a string with the values in a given <see cref="T:System.Collections.IEnumerable"/>, separated by a newline.
            </summary>
            <param name="value">The enumerable to concatenate.</param>
            <remarks>
            If an element of the IEnumerable is null, then its treated like an empty string.
            </remarks>
            <returns>
            Returns a string that contains each element in the input enumerable, separated by a newline.
            If the enumerable is empty, then this method returns null.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Collection.Recipes.EnumerableExtensions.ToNonGenericDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Converts a generic dictionary to a non-generic dictionary.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="value">The dictionary to convert.</param>
            <returns>
            The specified generic dictionary converted to a non-generic dictionary.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/>is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> contains duplicate keys.</exception>
        </member>
        <member name="T:OBeautifulCode.Enum.Recipes.EnumExtensions">
            <summary>
            Adds some convenient extension methods to enums.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Enum.Recipes.EnumExtensions.GetDefinedEnumValues``1">
            <summary>
            Gets the members/values of a specified enum.
            </summary>
            <typeparam name="TEnum">The type of enum.</typeparam>
            <returns>
            The members/values of the specified enum.
            For flags enums, returns all individual flags and all combined flags that are defined in the enum.
            </returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="TEnum"/> is not of type <see cref="T:System.Enum"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Enum.Recipes.EnumExtensions.GetDefinedEnumValues(System.Type)">
            <summary>
            Gets the members/values of a specified enum.
            </summary>
            <param name="enumType">The enum type.</param>
            <returns>
            The members/values of the specified enum.
            For flags enums, returns all individual flags and all combined flags that are defined in the enum.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumType"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="enumType"/> is not of type <see cref="T:System.Enum"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Enum.Recipes.EnumExtensions.IsFlagsEnum``1">
            <summary>
            Determines if the specified enum is a flags enum.
            </summary>
            <typeparam name="TEnum">The type of enum.</typeparam>
            <returns>
            true if the specified enum is a flags enum, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="TEnum"/> is not of type <see cref="T:System.Enum"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Enum.Recipes.EnumExtensions.IsFlagsEnum(System.Type)">
            <summary>
            Determines if the specified enum is a flags enum.
            </summary>
            <param name="enumType">The enum type.</param>
            <returns>
            true if the specified enum is a flags enum, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumType"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="enumType"/> is not of type <see cref="T:System.Enum"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Enum.Recipes.EnumExtensions.GetAllPossibleEnumValues``1">
            <summary>
            Gets all possible enum values.
            For a flags enum, this means all possible combination of flags,
            regardless of whether the combination is defined in the enum itself.
            </summary>
            <typeparam name="TEnum">The type of enum.</typeparam>
            <returns>
            All possible enum values.
            </returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="TEnum"/> is not of type <see cref="T:System.Enum"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Enum.Recipes.EnumExtensions.GetAllPossibleEnumValues(System.Type)">
            <summary>
            Gets all possible enum values.
            For a flags enum, this means all possible combination of flags,
            regardless of whether the combination is defined in the enum itself.
            </summary>
            <param name="enumType">The enum type.</param>
            <returns>
            All possible enum values.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumType"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="enumType"/> is not of type <see cref="T:System.Enum"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Enum.Recipes.EnumExtensions.GetFlagsCombinedWherePossible(System.Enum)">
            <summary>
            Gets the flags of a flags enum, with a preference for returning combined flags
            instead of individual flags where the enum value uses combined flags.
            </summary>
            <param name="value">The enum value to decompose into it's flags.</param>
            <remarks>
            Adapted from: <a href="http://stackoverflow.com/a/4171168/356790" />.
            </remarks>
            <returns>
            The flags of the specified enum, with combined flags instead of individual flags where possible.
            No bit will be repeated.  Thus, if two combined flags are represented in the value and they
            have an overlapping individual flag, only one of those combined flags will be returned and
            the other will be decomposed into it's non-overlapping individual flags.
            If value is 0, then a collection with only the 0 value is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Enum.Recipes.EnumExtensions.GetFlagsCombinedWherePossible``1(System.Enum)">
            <summary>
            Gets the flags of a flags enum, with a preference for returning combined flags
            instead of individual flags where the enum value uses combined flags.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The enum value to decompose into it's flags.</param>
            <remarks>
            Adapted from: <a href="http://stackoverflow.com/a/4171168/356790" />.
            </remarks>
            <returns>
            The flags of the specified enum, with combined flags instead of individual flags where possible.
            No bit will be repeated.  Thus, if two combined flags are represented in the value and they
            have an overlapping individual flag, only one of those combined flags will be returned and
            the other will be decomposed into it's non-overlapping individual flags.
            If value is 0, then a collection with only the 0 value is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><typeparamref name="TEnum"/> is not of type <see cref="T:System.Enum"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Enum.Recipes.EnumExtensions.HasFlagOverlap(System.Enum,System.Enum)">
            <summary>
            Checks if there is any overlap between the two <see cref="T:System.FlagsAttribute" /> enumerations.
            </summary>
            <param name="first">First to check.</param>
            <param name="second">Second to check.</param>
            <returns>Value indicating whether there is any overlap.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="first"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="second"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Enum.Recipes.EnumExtensions.GetIndividualFlags(System.Type)">
            <summary>
            Gets the individual flags of a flags enum type.
            </summary>
            <param name="enumType">The enum type.</param>
            <returns>
            The individuals flags of the specified flags enum type (includes 0).
            If <paramref name="enumType"/> is not a flags enum then all enum values are returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumType"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="enumType"/> is not of type <see cref="T:System.Enum"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Enum.Recipes.EnumExtensions.GetIndividualFlags``1">
            <summary>
            Gets the individual flags of a flags enum type.
            </summary>
            <typeparam name="TEnum">The type of enum.</typeparam>
            <returns>
            The individuals flags of the specified flags enum type (includes 0).
            If <typeparamref name="TEnum"/> is not a flags enum then all enum values are returned.
            </returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="TEnum"/> is not of type <see cref="T:System.Enum"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Enum.Recipes.EnumExtensions.GetIndividualFlags(System.Enum)">
            <summary>
            Gets the individual flags of a flags enum value.
            </summary>
            <param name="value">The enum value to decompose into it's individual flags.</param>
            <remarks>
            Adapted from: <a href="http://stackoverflow.com/a/4171168/356790" />.
            </remarks>
            <returns>
            The individuals flags of the specified flags enum value.
            If value is 0, then a collection with only the 0 value is returned.
            If the enum is not a flags enum then a collection with the enum value itself is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Enum.Recipes.EnumExtensions.GetIndividualFlags``1(System.Enum)">
            <summary>
            Gets the individual flags of a flags enum value.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The enum value to decompose into it's individual flags.</param>
            <remarks>
            Adapted from: <a href="http://stackoverflow.com/a/4171168/356790" />.
            </remarks>
            <returns>
            The individuals flags of the specified flags enum value.
            If value is 0, then a collection with only the 0 value is returned.
            If the enum is not a flags enum then a collection with the enum value itself is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><typeparamref name="TEnum"/> is not of type <see cref="T:System.Enum"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Enum.Recipes.EnumExtensions.ToEnum``1(System.String,System.Boolean)">
            <summary>
            Parses and converts to the specified string to an enum value.
            </summary>
            <remarks>
            [Flags] Colors { None=0, Red = 1, Green = 2, Blue = 4 }
            '0'          => None
            '2'          => Green
            '7'          => Red | Green | Blue
            'Blue'       => Blue
            'blue'       => Blue (if ignoreCase = true)
            'Red, Green' => Red | Green
            'Red,Green'  => Red | Green
            'red,green'  => Red | Green (if ignoreCase = true)
            </remarks>
            <typeparam name="TEnum">The type of enum.</typeparam>
            <param name="value">The string value to convert.</param>
            <param name="ignoreCase">
            Optional value indicating whether to operate in case sensitive or case insensitive mode.
            Default is operate in case sensitive mode.
            Use <c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.
            </param>
            <returns>
            The enum member/value that corresponds to the specified string value.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is white space.</exception>
            <exception cref="T:System.ArgumentException"><typeparamref name="TEnum"/> does not represent an enumeration.</exception>
            <exception cref="T:System.ArgumentException">Cannot convert the specified value to an enum member of the <typeparamref name="TEnum"/> enum.</exception>
        </member>
        <member name="M:OBeautifulCode.Enum.Recipes.EnumExtensions.ToEnum(System.String,System.Type,System.Boolean)">
            <summary>
            Parses and converts to the specified string to an enum value.
            </summary>
            <remarks>
            [Flags] Colors { None=0, Red = 1, Green = 2, Blue = 4 }
            '0'          => None
            '2'          => Green
            '7'          => Red | Green | Blue
            'Blue'       => Blue
            'blue'       => Blue (if ignoreCase = true)
            'Red, Green' => Red | Green
            'Red,Green'  => Red | Green
            'red,green'  => Red | Green (if ignoreCase = true)
            </remarks>
            <param name="value">The string value to convert.</param>
            <param name="enumType">The type of the enum.</param>
            <param name="ignoreCase">
            Optional value indicating whether to operate in case sensitive or case insensitive mode.
            Default is operate in case sensitive mode.
            Use <c>true</c> to read value in case insensitive mode; <c>false</c> to read value in case sensitive mode.
            </param>
            <returns>
            The enum member/value that corresponds to the specified string value.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value"/> is white space.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumType"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="enumType"/> does not represent an enumeration.</exception>
            <exception cref="T:System.ArgumentException">Cannot convert the specified value to an enum member of the <paramref name="enumType"/> enum.</exception>
        </member>
        <member name="M:OBeautifulCode.Enum.Recipes.EnumExtensions.BitwiseOr(System.Enum,System.Enum)">
            <summary>
            Performs a bitwise OR on the specified enum values.
            </summary>
            <param name="value1">The first enum value.</param>
            <param name="value2">The second enum value.</param>
            <returns>
            The result of performing a bitwise OR operation on the specified enum values.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value1"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="value2"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value1"/> is not a flags enum.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="value1"/> Type != <paramref name="value2"/> Type.</exception>
        </member>
        <member name="T:OBeautifulCode.Equality.Recipes.ByteArrayEqualityComparer">
            <summary>
            Compares two byte arrays for equality.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.ByteArrayEqualityComparer.Equals(System.Byte[],System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.ByteArrayEqualityComparer.GetHashCode(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Equality.Recipes.DateTimeEqualityComparer">
            <summary>
            Compares two <see cref="T:System.DateTime"/>, fixing .NET's default implementation where two objects
            having the same <see cref="P:System.DateTime.Ticks"/> but different <see cref="P:System.DateTime.Kind"/> are
            considered equal.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.DateTimeEqualityComparer.Equals(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.DateTimeEqualityComparer.GetHashCode(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Equality.Recipes.DictionaryEqualityComparer`2">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for any <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of dictionary keys.</typeparam>
            <typeparam name="TValue">The type of dictionary values.</typeparam>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.DictionaryEqualityComparer`2.Equals(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IDictionary{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.DictionaryEqualityComparer`2.GetHashCode(System.Collections.Generic.IDictionary{`0,`1})">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Equality.Recipes.EnumerableEqualityComparer`1">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for any <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <remarks>
            Adapted from: <a href="https://stackoverflow.com/a/14675741/356790" />.
            </remarks>
            <typeparam name="T">The type of objects to enumerate.</typeparam>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.EnumerableEqualityComparer`1.#ctor(OBeautifulCode.Equality.Recipes.EnumerableEqualityComparerStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Equality.Recipes.EnumerableEqualityComparer`1"/> class.
            </summary>
            <param name="enumerableEqualityComparerStrategy">The strategy to use when comparing two <see cref="T:System.Collections.Generic.IEnumerable`1"/> for equality.</param>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.EnumerableEqualityComparer`1.Equals(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.EnumerableEqualityComparer`1.GetHashCode(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Equality.Recipes.EnumerableEqualityComparerStrategy">
            <summary>
            Determines the strategy to use when comparing two <see cref="T:System.Collections.Generic.IEnumerable`1"/> for equality.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Equality.Recipes.EnumerableEqualityComparerStrategy.SequenceEqual">
            <summary>
            Use <see cref="M:OBeautifulCode.Equality.Recipes.EqualityExtensions.IsSequenceEqualTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"/>.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Equality.Recipes.EnumerableEqualityComparerStrategy.UnorderedEqual">
            <summary>
            Use <see cref="M:OBeautifulCode.Equality.Recipes.EqualityExtensions.IsUnorderedEqualTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})"/>.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Equality.Recipes.EqualityComparerHelper">
            <summary>
            Helper methods related to <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.EqualityComparerHelper.GetEqualityComparerToUse``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Gets the equality comparer to use for the specified type.
            </summary>
            <typeparam name="T">The type of the objects being compared.</typeparam>
            <param name="comparer">Optional comparer passed into the calling method.  Default is null, which instructs this method to determine the comparer.  If not null, then the specified comparer is returned.</param>
            <returns>
            The equality comparer to use for the specified type.
            </returns>
        </member>
        <member name="T:OBeautifulCode.Equality.Recipes.EqualityExtensions">
            <summary>
            Extension methods that test for equality between two objects.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.EqualityExtensions.IsEqualTo``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares objects for equality.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
            <param name="item1">The first object to compare.</param>
            <param name="item2">The second object to compare.</param>
            <param name="comparer">Optional equality comparer to use to compare the objects.  Default is to call <see cref="M:OBeautifulCode.Equality.Recipes.EqualityComparerHelper.GetEqualityComparerToUse``1(System.Collections.Generic.IEqualityComparer{``0})"/>.</param>
            <returns>
            - true if the two objects are equal
            - otherwise, false.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.EqualityExtensions.IsDictionaryEqualTo``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Compares two dictionaries for equality.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionaries.</typeparam>
            <typeparam name="TValue">The type of values in the dictionaries.</typeparam>
            <param name="item1">The first <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> to compare.</param>
            <param name="item2">The second <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> to compare.</param>
            <param name="valueComparer">Optional equality comparer to use to compare values.  Default is to call <see cref="M:OBeautifulCode.Equality.Recipes.EqualityComparerHelper.GetEqualityComparerToUse``1(System.Collections.Generic.IEqualityComparer{``0})"/>.</param>
            <returns>
            - true if the two source dictionaries are null.
            - false if one or the other is null.
            - false if the dictionaries are of different length.
            - true if the two dictionaries are of equal length and their values are equal for the same keys.
            - otherwise, false.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.EqualityExtensions.IsReadOnlyDictionaryEqualTo``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Compares two dictionaries for equality.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionaries.</typeparam>
            <typeparam name="TValue">The type of values in the dictionaries.</typeparam>
            <param name="item1">The first <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> to compare.</param>
            <param name="item2">The second <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> to compare.</param>
            <param name="valueComparer">Optional equality comparer to use to compare values.  Default is to call <see cref="M:OBeautifulCode.Equality.Recipes.EqualityComparerHelper.GetEqualityComparerToUse``1(System.Collections.Generic.IEqualityComparer{``0})"/>.</param>
            <returns>
            - true if the two source dictionaries are null.
            - false if one or the other is null.
            - false if the dictionaries are of different length.
            - true if the two dictionaries are of equal length and their values are equal for the same keys.
            - otherwise, false.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.EqualityExtensions.IsSequenceEqualTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two dictionaries for equality.
            </summary>
            <typeparam name="TElement">The type of the elements of the input sequences.</typeparam>
            <param name="item1">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare to <paramref name="item2"/>.</param>
            <param name="item2">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare to the first sequence.</param>
            <param name="elementComparer">Optional equality comparer to use to compare the elements.  Default is to call <see cref="M:OBeautifulCode.Equality.Recipes.EqualityComparerHelper.GetEqualityComparerToUse``1(System.Collections.Generic.IEqualityComparer{``0})"/>.</param>
            <returns>
            - true if the two source sequences are null.
            - false if one or the other is null.
            - true if the two sequences are of equal length and their corresponding elements are equal according to <paramref name="elementComparer"/>.
            - otherwise, false.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.EqualityExtensions.IsUnorderedEqualTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines if two enumerables have the exact same elements in any order.
            Every unique element in the first set has to appear in the second set the same number of times it appears in the first.
            </summary>
            <typeparam name="TElement">The type of the elements of the input sequences.</typeparam>
            <param name="item1">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare to <paramref name="item2"/>.</param>
            <param name="item2">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare to the first sequence.</param>
            <param name="elementComparer">Optional equality comparer to use to compare the elements.  Default is to call <see cref="M:OBeautifulCode.Equality.Recipes.EqualityComparerHelper.GetEqualityComparerToUse``1(System.Collections.Generic.IEqualityComparer{``0})"/>.</param>
            <returns>
            - true if the two source sequences are null.
            - false if one or the other is null.
            - false if there is any symmetric difference.
            - true if the two sequences both contain the same number of elements for each unique element.
            - otherwise, false.
            </returns>
        </member>
        <member name="T:OBeautifulCode.Equality.Recipes.HashCodeHelper">
            <summary>
            Provides methods to help with generating hash codes for structures and classes. This handles
            value types, nullable type, and objects.
            </summary>
            <remarks>
            Adapted from NodaTime: <a href="https://github.com/nodatime/nodatime/blob/master/src/NodaTime/Utility/HashCodeHelper.cs"/>.
            The basic usage pattern is as follows.
            <example>
            <code>
             public override int GetHashCode() => HashCodeHelper.Initialize().Hash(Field1).Hash(Field2).Hash(Field3).Value;
            </code>
            </example>
            </remarks>
        </member>
        <member name="F:OBeautifulCode.Equality.Recipes.HashCodeHelper.HashCodeMultiplier">
            <summary>
            The multiplier for each value.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Equality.Recipes.HashCodeHelper.HashCodeInitializer">
            <summary>
            The initial hash value.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.HashCodeHelper.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Equality.Recipes.HashCodeHelper"/> class.
            </summary>
            <param name="value">The hash code value.</param>
        </member>
        <member name="P:OBeautifulCode.Equality.Recipes.HashCodeHelper.Value">
            <summary>
            Gets the hash code value.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.HashCodeHelper.Initialize">
            <summary>
            Returns the initial value for a hash code.
            </summary>
            <returns>The initial integer wrapped in a <see cref="T:OBeautifulCode.Equality.Recipes.HashCodeHelper"/> value.</returns>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.HashCodeHelper.Initialize(System.Int32)">
            <summary>
            Returns the initial value for a hash code.
            </summary>
            <param name="seedValue">Seed value to initialize with (often the hash code from a base class using it's base properties).</param>
            <returns>The initial integer wrapped in a <see cref="T:OBeautifulCode.Equality.Recipes.HashCodeHelper"/> value.</returns>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.HashCodeHelper.Hash``1(``0)">
            <summary>
            Adds the hash code for the given item to the current hash code and returns the new hash code.
            </summary>
            <typeparam name="T">The type of the item being hashed.</typeparam>
            <param name="item">The item to hash.</param>
            <returns>The new hash code.</returns>
        </member>
        <member name="T:OBeautifulCode.Equality.Recipes.LambdaBackedEqualityComparer`1">
            <summary>
            An equality comparer backed by a lambda.
            </summary>
            <typeparam name="T">The type of objects to compare.</typeparam>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.LambdaBackedEqualityComparer`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Equality.Recipes.LambdaBackedEqualityComparer`1"/> class.
            </summary>
            <param name="equalsFunc">The function to use to determine whether two objects of type <typeparamref name="T"/> are equal.</param>
            <param name="getHashCodeFunc">OPTIONAL function to get the hash code for an object of type <typeparamref name="T"/> in context of this equality comparer.  DEFAULT is to have <see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)"/> throw <see cref="T:System.NotSupportedException"/>.</param>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.LambdaBackedEqualityComparer`1.Equals(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.LambdaBackedEqualityComparer`1.GetHashCode(`0)">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Equality.Recipes.NativeMethods">
            <summary>
            P/invoke method.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.NativeMethods.memcmp(System.Byte[],System.Byte[],System.Int64)">
            <summary>
            Compares two byte arrays.
            </summary>
            <param name="b1">The first byte array.</param>
            <param name="b2">The second byte array.</param>
            <param name="count">The length of the bytes.</param>
            <returns>
            0 if the byte arrays are equal.
            Less than 0 if the first byte array is less than the second byte array.
            Greater than 0 if the first byte array is greater than the second byte array.
            </returns>
        </member>
        <member name="T:OBeautifulCode.Equality.Recipes.NullableDateTimeEqualityComparer">
            <summary>
            Compares two <see cref="T:System.Nullable`1"/>, fixing .NET's default implementation where two objects
            having the same <see cref="P:System.DateTime.Ticks"/> but different <see cref="P:System.DateTime.Kind"/> are
            considered equal.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.NullableDateTimeEqualityComparer.Equals(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.NullableDateTimeEqualityComparer.GetHashCode(System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Equality.Recipes.ObjectEqualityComparer">
            <summary>
            Compares two objects equality.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.ObjectEqualityComparer.Equals(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.ObjectEqualityComparer.GetHashCode(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Equality.Recipes.ReadOnlyDictionaryEqualityComparer`2">
            <summary>
            An implementation of <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for any <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The type of dictionary keys.</typeparam>
            <typeparam name="TValue">The type of dictionary values.</typeparam>
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.ReadOnlyDictionaryEqualityComparer`2.Equals(System.Collections.Generic.IReadOnlyDictionary{`0,`1},System.Collections.Generic.IReadOnlyDictionary{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Equality.Recipes.ReadOnlyDictionaryEqualityComparer`2.GetHashCode(System.Collections.Generic.IReadOnlyDictionary{`0,`1})">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Math.Recipes.ThreadSafeRandom">
            <summary>
            Represents a thread-safe pseudo-random number generator,
            a device that produces a sequence of numbers that meet
            certain statistical requirements for randomness.
            </summary>
            <remarks>
            Adapted from:
            <a href="http://blogs.msdn.com/b/pfxteam/archive/2009/02/19/9434171.aspx"/>
            <a href="http://codeblog.jonskeet.uk/2009/11/04/revisiting-randomness/"/>
            System.Random is not thread-safe, hence the need for this class.
            </remarks>
        </member>
        <member name="F:OBeautifulCode.Math.Recipes.ThreadSafeRandom.Lock">
            <summary>
            Lock object for access to global random number generator.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Math.Recipes.ThreadSafeRandom.random">
            <summary>
            A single random number generator for the app domain,
            used to seed thread-specific random number generators.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Math.Recipes.ThreadSafeRandom.Reseed(System.Int32)">
            <summary>
            Reseeds the random number generator.
            </summary>
            <param name="seed">
            A number used to calculate a starting value for the pseudo-random number sequence.
            If a negative number is specified, the absolute value of the number is used.
            </param>
        </member>
        <member name="M:OBeautifulCode.Math.Recipes.ThreadSafeRandom.Next">
            <summary>
            Returns a nonnegative random integer.
            </summary>
            <remarks>
            Random.Next generates a random number whose value ranges from zero to less than <see cref="F:System.Int32.MaxValue"/>.
            To generate a random number whose value ranges from zero to some other positive number, use the <see cref="M:OBeautifulCode.Math.Recipes.ThreadSafeRandom.Next(System.Int32)"/> method overload.
            To generate a random number within a different range, use the <see cref="M:OBeautifulCode.Math.Recipes.ThreadSafeRandom.Next(System.Int32,System.Int32)"/> method overload.
            </remarks>
            <returns>
            A 32-bit signed integer greater than or equal to zero and less than MaxValue.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Math.Recipes.ThreadSafeRandom.Next(System.Int32)">
            <summary>
            Returns a nonnegative random integer that is less than the specified maximum.
            </summary>
            <param name="maxValue">The exclusive upper bound of the random number to be generated. maxValue must be greater than or equal to zero.</param>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than maxValue; that is, the range of return values
            ordinarily includes zero but not maxValue. However, if maxValue equals zero, maxValue is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxValue"/> is less than zero.</exception>
        </member>
        <member name="M:OBeautifulCode.Math.Recipes.ThreadSafeRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <remarks>
            Unlike the other overloads of the Next method, which return only non-negative values, this method can return a negative random integer.
            </remarks>
            <returns>
            A 32-bit signed integer greater than or equal to minValue and less than maxValue; that is, the range of
            return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="minValue"/> is greater than <paramref name="maxValue"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Math.Recipes.ThreadSafeRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <remarks>
            Each element of the array of bytes is set to a random number greater than or equal to zero, and less than or equal to MaxValue.
            To generate a cryptographically secured random number suitable for creating a random password,
            for example, use a method such as RNGCryptoServiceProvider.GetBytes.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Math.Recipes.ThreadSafeRandom.NextDouble">
            <summary>
            Returns a random floating-point number between 0.0 and 1.0.
            </summary>
            <remarks>
            This method is the public version of the protected method, Sample.
            </remarks>
            <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="T:OBeautifulCode.Reflection.Recipes.AccessModifier">
            <summary>
            The supported access modifiers, in order of least to greatest access.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.AccessModifier.Unknown">
            <summary>
            Unknown (default).
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.AccessModifier.Private">
            <summary>
            Private access: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/private" />.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.AccessModifier.PrivateProtected">
            <summary>
            Private protected access: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/private-protected" />.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.AccessModifier.Protected">
            <summary>
            Protected access: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/protected" />.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.AccessModifier.ProtectedInternal">
            <summary>
            Protected internal access: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/protected-internal" />.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.AccessModifier.Internal">
            <summary>
            Internal access: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/internal" />.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.AccessModifier.Public">
            <summary>
            Public access: <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/public" />.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Reflection.Recipes.AssemblyHelper">
            <summary>
            Provides useful methods for extracting information from and
            interacting with assemblies using reflection.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.AssemblyHelper.GetCodeBaseAsPathInsteadOfUri(System.Reflection.Assembly)">
            <summary>
            Gets the <see cref="P:System.Reflection.Assembly.CodeBase" /> as a real file path instead of a <see cref="T:System.Uri" /> so it can be used with common <see cref="N:System.IO" /> operations.
            </summary>
            <param name="assembly">Assembly to extend functionality of.</param>
            <returns>CodeBase as real path.</returns>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.AssemblyHelper.OpenEmbeddedResourceStream(System.Reflection.Assembly,System.String,OBeautifulCode.Reflection.Recipes.CompressionMethod)">
            <summary>
            Retrieves an embedded resource's stream.
            </summary>
            <param name="assembly">Calling assembly.</param>
            <param name="resourceName">Name of the resource in the calling assembly.</param>
            <param name="decompressionMethod">
            The compression algorithm and/or archive file format that was used to compress the resource.
            This is used to open a decompressed stream.
            </param>
            <returns>Returns the specified manifest resource as a stream.</returns>
            <exception cref="T:System.ArgumentNullException">assembly is null.</exception>
            <exception cref="T:System.ArgumentNullException">resourceName is null.</exception>
            <exception cref="T:System.ArgumentException">resourceName is whitspace.</exception>
            <exception cref="T:System.InvalidOperationException">Resource was not found in the calling assembly.</exception>
            <exception cref="T:System.InvalidOperationException">The resource was not an embedded resource (that is, non-linked).</exception>
            <exception cref="T:System.NotImplementedException">Resource length is greater than Int64.MaxValue.</exception>
            <exception cref="T:System.IO.InvalidDataException">When compression method is Gzip, but the resource was not compressed using Gzip.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.AssemblyHelper.OpenEmbeddedResourceStream(System.String,System.Boolean,OBeautifulCode.Reflection.Recipes.CompressionMethod)">
            <summary>
            Retrieves a stream for an embedded resource.
            </summary>
            <param name="resourceName">Name of the resource in the calling assembly.</param>
            <param name="addCallerNamespace">
            Determines whether to add the namespace of the calling method to the resource name.
            If false, then the resource name is used as-is.
            If true, then the resource name is prepended with the fully qualified namespace of the calling method, followed by a period
            (e.g. if resource name = "MyFile.txt" then it changed to something like "MyNamespace.MySubNamespace.MyFile.txt").
            </param>
            <param name="decompressionMethod">
            The compression algorithm and/or archive file format that was used to compress the resource.
            This is used to open a decompressed stream.
            </param>
            <returns>Returns the specified manifest resource as a stream.</returns>
            <exception cref="T:System.ArgumentNullException">resourceName is null.</exception>
            <exception cref="T:System.ArgumentException">resourceName is whitspace.</exception>
            <exception cref="T:System.InvalidOperationException">Resource was not found in the calling assembly.</exception>
            <exception cref="T:System.InvalidOperationException">The resource was not an embedded resource (that is, non-linked).</exception>
            <exception cref="T:System.NotImplementedException">Resource length is greater than Int64.MaxValue.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.AssemblyHelper.ReadEmbeddedResourceAsString(System.String,System.Boolean,OBeautifulCode.Reflection.Recipes.CompressionMethod)">
            <summary>
            Reads an embedded resource from the calling assembly and returns as string.
            </summary>
            <param name="resourceName">Name of the resource in the calling assembly.</param>
            <param name="addCallerNamespace">
            Determines whether to add the namespace of the calling method to the resource name.
            If false, then the resource name is used as-is.
            If true, then the resource name is prepended with the fully qualified namespace of the calling method, followed by a period
            (e.g. if resource name = "MyFile.txt" then it changed to something like "MyNamespace.MySubNamespace.MyFile.txt").
            </param>
            <param name="decompressionMethod">
            The compression algorithm and/or archive file format that was used to compress the resource.
            This is used to determine how the resource should be decompressed.
            </param>
            <remarks>
            Adapted from article "Create String Variables from Embedded Resources Files" on The Code Project
            <a href="http://www.codeproject.com/KB/cs/embeddedresourcestrings.aspx"/>
            Resource information is returned only if the resource is visible to the caller, or the caller has ReflectionPermission.
            This method returns null if a private resource in another assembly is accessed and the caller does not have ReflectionPermission with the ReflectionPermissionFlag.MemberAccess flag.
            </remarks>
            <returns>Returns the specified manifest resource as a string.</returns>
            <exception cref="T:System.ArgumentNullException">resourceName is null.</exception>
            <exception cref="T:System.ArgumentException">resourceName is white space.</exception>
            <exception cref="T:System.InvalidOperationException">Resource was not found in the calling assembly.</exception>
            <exception cref="T:System.InvalidOperationException">The resource was not an embedded resource (that is, non-linked).</exception>
            <exception cref="T:System.NotImplementedException">Resource length is greater than Int64.MaxValue.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.AssemblyHelper.ReadEmbeddedResourceAsBytes(System.String,System.Boolean,OBeautifulCode.Reflection.Recipes.CompressionMethod)">
            <summary>
            Reads an embedded resource from the calling assembly and returns as a byte array.
            </summary>
            <param name="resourceName">Name of the resource in the calling assembly.</param>
            <param name="addCallerNamespace">
            Determines whether to add the namespace of the calling method to the resource name.
            If false, then the resource name is used as-is.
            If true, then the resource name is prepended with the fully qualified namespace of the calling method, followed by a period
            (e.g. if resource name = "MyFile.txt" then it changed to something like "MyNamespace.MySubNamespace.MyFile.txt").
            </param>
            <param name="decompressionMethod">
            The compression algorithm and/or archive file format that was used to compress the resource.
            This is used to determine how the resource should be decompressed.
            </param>
            <returns>
            Returns the specified manifest resource as a byte array.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="resourceName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="resourceName"/> is white space.</exception>
            <exception cref="T:System.InvalidOperationException">Resource was not found in the calling assembly.</exception>
            <exception cref="T:System.InvalidOperationException">The resource was not an embedded resource (that is, non-linked).</exception>
            <exception cref="T:System.NotImplementedException">Resource length is greater than Int64.MaxValue.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.AssemblyHelper.GetTypesFromAssemblies(System.Collections.Generic.IReadOnlyCollection{System.Reflection.Assembly})">
            <summary>
            Gets all types defined within a set of assemblies.
            </summary>
            <remarks>
            If you want to get all loaded types, then pass-in the result of AssemblyLoader.GetLoadedAssemblies().
            </remarks>
            <param name="assemblies">The assemblies.</param>
            <returns>
            The types defined within the specified assemblies.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.AssemblyHelper.ResolveResourceName(System.String,System.Boolean)">
            <summary>
            Resolves a resource name.
            </summary>
            <param name="resourceName">The supplied resource name.</param>
            <param name="addCallerNamespace">
            Determines whether to add the namespace of the calling method to the resource name.
            If false, then the resource name is used as-is.
            If true, then the resource name is prepended with the fully qualified namespace of the calling method, followed by a period
            (e.g. if resource name = "MyFile.txt" then it changed to something like "MyNamespace.MySubNamespace.MyFile.txt").
            </param>
            <returns>
            The resolved resource name.
            </returns>
        </member>
        <member name="T:OBeautifulCode.Reflection.Recipes.AssemblyLoader">
            <summary>
            Helper that will load all the assemblies in a directory and wire up all the necessary <see cref="T:System.AppDomain" /> logic to allow them to be reflected into.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.AssemblyLoader.DefaultAssemblyFileExtensionsWithoutPeriodToLoad">
            <summary>
            Default assembly file extensions to process; ONLY the file extension not including the period e.g. "dll" NOT ".dll".
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.AssemblyLoader.DefaultSymbolFileExtensionsWithoutPeriodToLoad">
            <summary>
            Default symbol file extensions to process; ONLY the file extension not including the period e.g. "pdb" NOT ".pdb".
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.AssemblyLoader.DefaultAssemblyFileNameRegexBlacklist">
            <summary>
            Default list of regular expressions to evaluate against each file name and skip loading on matches.
            </summary>
        </member>
        <member name="P:OBeautifulCode.Reflection.Recipes.AssemblyLoader.FilePathToAssemblyMap">
            <summary>
            Gets a map of the file paths discovered to the <see cref="T:System.Reflection.Assembly" /> loaded.
            </summary>
        </member>
        <member name="P:OBeautifulCode.Reflection.Recipes.AssemblyLoader.SymbolFilePaths">
            <summary>
            Gets a list of the discovered symbol file paths.
            </summary>
        </member>
        <member name="P:OBeautifulCode.Reflection.Recipes.AssemblyLoader.DirectoryPath">
            <summary>
            Gets the directory path to discover assemblies in.
            </summary>
        </member>
        <member name="P:OBeautifulCode.Reflection.Recipes.AssemblyLoader.LoadRecursively">
            <summary>
            Gets a value indicating whether or not to discover recursively within the directory.
            </summary>
        </member>
        <member name="P:OBeautifulCode.Reflection.Recipes.AssemblyLoader.AssemblyFileExtensionsWithoutPeriodToLoad">
            <summary>
            Gets the assembly file extensions to process; ONLY the file extension not including the period e.g. "dll" NOT ".dll".
            </summary>
        </member>
        <member name="P:OBeautifulCode.Reflection.Recipes.AssemblyLoader.SymbolFileExtensionsWithoutPeriodToConsider">
            <summary>
            Gets the symbol file extensions to process; ONLY the file extension not including the period e.g. "pdb" NOT ".pdb".
            </summary>
        </member>
        <member name="P:OBeautifulCode.Reflection.Recipes.AssemblyLoader.AssemblyFileNameRegexBlacklist">
            <summary>
            Gets the list of regular expressions to evaluate against each file name and skip loading on matches.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.AssemblyLoader.GetLoadedAssemblies">
            <summary>
            Gets the currently loaded assemblies (excluding dynamic ones).
            </summary>
            <remarks>
            If you want to get all types, then pass-in the result of this call into AssemblyHelper.GetTypesFromAssemblies().
            </remarks>
            <returns>Currently loaded assemblies.</returns>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.AssemblyLoader.CreateAndLoadFromDirectory(System.String,System.Action{System.String},System.Boolean,System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{System.String},System.Collections.Generic.IReadOnlyCollection{System.String},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Factory method to build an initialized <see cref="T:OBeautifulCode.Reflection.Recipes.AssemblyLoader" />.
            </summary>
            <param name="directoryPath">Directory path to discover and load assemblies from.</param>
            <param name="logger">Optional logger action to log progress and messages; DEFAULT is none.</param>
            <param name="loadRecursively">Optional value indicating whether or not to discover recursively within the directory; DEFAULT is true.</param>
            <param name="assemblyFileExtensionsWithoutDotToLoad">Optional list of assembly file extensions to process; ONLY the file extension not including the period e.g. "dll" NOT ".dll"; DEFAULT is <see cref="F:OBeautifulCode.Reflection.Recipes.AssemblyLoader.DefaultAssemblyFileExtensionsWithoutPeriodToLoad" />.</param>
            <param name="symbolFileExtensionsWithoutPeriodToConsider">Optional list of symbol file extensions to process; ONLY the file extension not including the period e.g. "pdb" NOT ".pdb"; DEFAULT is <see cref="F:OBeautifulCode.Reflection.Recipes.AssemblyLoader.DefaultSymbolFileExtensionsWithoutPeriodToLoad" />.</param>
            <param name="assemblyFileNameRegexBlacklist">Optional list of regular expressions to evaluate against each file name and skip loading on matches; DEFAULT is <see cref="F:OBeautifulCode.Reflection.Recipes.AssemblyLoader.DefaultAssemblyFileNameRegexBlacklist" />.</param>
            <param name="suppressFileLoadException">Optionally suppress <see cref="T:System.IO.FileLoadException"/>.</param>
            <param name="suppressBadImageFormatException">Optionally suppress <see cref="T:System.BadImageFormatException"/>.</param>
            <param name="suppressReflectionTypeLoadException">Optionally suppress <see cref="T:System.Reflection.ReflectionTypeLoadException"/>.</param>
            <returns>Initialized <see cref="T:OBeautifulCode.Reflection.Recipes.AssemblyLoader" /> this needs to be in scope and is disposable so keep this alive at your most top level while reflecting.</returns>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.AssemblyLoader.Initialize(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes the manager by configuring <see cref="T:System.AppDomain" /> hooks and discovering then loading the assemblies in the given path.
            </summary>
            <param name="suppressFileLoadException">Optionally suppress <see cref="T:System.IO.FileLoadException"/>.</param>
            <param name="suppressBadImageFormatException">Optionally suppress <see cref="T:System.BadImageFormatException"/>.</param>
            <param name="suppressReflectionTypeLoadException">Optionally suppress <see cref="T:System.Reflection.ReflectionTypeLoadException"/>.</param>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.AssemblyLoader.Dispose">
            <inheritdoc cref="T:System.IDisposable" />
        </member>
        <member name="T:OBeautifulCode.Reflection.Recipes.BindingFlagsFor">
            <summary>
            Contains some pre-configured <see cref="T:System.Reflection.BindingFlags"/>.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.BindingFlagsFor.AllDeclaredAndInheritedMembers">
            <summary>
            Finds all (public, protected, internal, private) instance and static members that are declared at the level of the specified type's hierarchy or inherited.
            Note that when an interface implements another interface (and so on), those implemented interfaces are NOT considered to be inherited.
            <see cref="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetInterfaceDeclaredAndImplementedMethods(System.Type)"/>
            Note that private members in specified type's inheritance path are NOT inherited.  Public, internal, and protected members are.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.BindingFlagsFor.AllDeclaredAndInheritedInstanceMembers">
            <summary>
            Finds all (public, protected, internal, private) instance (not static) members that are declared at the level of the specified type's hierarchy or inherited.
            Note that when an interface implements another interface (and so on), those implemented interfaces are NOT considered to be inherited.
            <see cref="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetInterfaceDeclaredAndImplementedMethods(System.Type)"/>
            Note that private members in specified type's inheritance path are NOT inherited.  Public, internal, and protected members are.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.BindingFlagsFor.AllDeclaredAndInheritedStaticMembers">
            <summary>
            Finds all static (not instance) members that are declared at the level of the specified type's hierarchy or inherited.
            Note that when an interface implements another interface (and so on), those implemented interfaces are NOT considered to be inherited.
            <see cref="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetInterfaceDeclaredAndImplementedMethods(System.Type)"/>
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.BindingFlagsFor.PublicDeclaredAndInheritedMembers">
            <summary>
            Finds public (not protected, not internal, not private) instance and public static members that are declared at the level of the specified type's hierarchy or inherited.
            Note that when an interface implements another interface (and so on), those implemented interfaces are NOT considered to be inherited.
            <see cref="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetInterfaceDeclaredAndImplementedMethods(System.Type)"/>
            Note that private members in specified type's inheritance path are NOT inherited.  Public, internal, and protected members are.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.BindingFlagsFor.PublicDeclaredAndInheritedInstanceMembers">
            <summary>
            Finds public (not protected, not internal, not private) instance (not static) members that are declared at the level of the specified type's hierarchy or inherited.
            Note that when an interface implements another interface (and so on), those implemented interfaces are NOT considered to be inherited.
            <see cref="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetInterfaceDeclaredAndImplementedMethods(System.Type)"/>
            Note that private members in specified type's inheritance path are NOT inherited.  Public, internal, and protected members are.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.BindingFlagsFor.PublicDeclaredAndInheritedStaticMembers">
            <summary>
            Finds public (not protected, not internal, not private) static (not instance) members that are declared at the level of the specified type's hierarchy or inherited.
            Note that private members in specified type's inheritance path are NOT inherited.  Public, internal, and protected members are.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.BindingFlagsFor.AllDeclaredButNotInheritedMembers">
            <summary>
            Finds all (public, protected, internal, private) instance and static members that are declared at the level of the specified type's hierarchy (not inherited).
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.BindingFlagsFor.AllDeclaredButNotInheritedInstanceMembers">
            <summary>
            Finds all (public, protected, internal, private) instance (not static) members that are declared at the level of the specified type's hierarchy (not inherited).
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.BindingFlagsFor.AllDeclaredButNotInheritedStaticMembers">
            <summary>
            Finds all (public, protected, internal, private) static (not instance) members that are declared at the level of the specified type's hierarchy (not inherited).
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.BindingFlagsFor.PublicDeclaredButNotInheritedMembers">
            <summary>
            Finds public (not protected, not internal, not private) instance or static members that are declared at the level of the specified type's hierarchy (not inherited).
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.BindingFlagsFor.PublicDeclaredButNotInheritedInstanceMembers">
            <summary>
            Finds public (not protected, not internal, not private) instance (not static) members that are declared at the level of the specified type's hierarchy (not inherited).
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.BindingFlagsFor.PublicDeclaredButNotInheritedStaticMembers">
            <summary>
            Finds public (not protected, not internal, not private) static (not instance) members that are declared at the level of the specified type's hierarchy (not inherited).
            </summary>
        </member>
        <member name="T:OBeautifulCode.Reflection.Recipes.CompressionMethod">
            <summary>
            Determines the compression algorithm and/or archive file format used to compress a resource.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.CompressionMethod.None">
            <summary>
            The resource is not compressed.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.CompressionMethod.Gzip">
            <summary>
            The resource is compressed using the gzip file format,
            using the DEFLATE algorithm.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Reflection.Recipes.ConstructorsMatchedToPropertiesStrategy">
            <summary>
            Specifies the strategy to use when matching constructors and properties.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.ConstructorsMatchedToPropertiesStrategy.Invalid">
            <summary>
            Invalid (default).
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.ConstructorsMatchedToPropertiesStrategy.AllConstructorParametersHaveMatchingProperty">
            <summary>
            Include constructors where every constructor parameter matches to a property.
            If there a default (parameterless) constructor, it will be considered a match
            regardless of the properties.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.ConstructorsMatchedToPropertiesStrategy.AllConstructorParametersHaveMatchingPropertyWithNoUnmatchedProperties">
            <summary>
            Include constructors where every constructor parameter matches to a property
            and there are no unmatched properties.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers">
            <summary>
            Scopes the search for members based on access modifiers.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.None">
            <summary>
            None (default).
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.Public">
            <summary>
            Include public members.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.Internal">
            <summary>
            Include internal members.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.ProtectedInternal">
            <summary>
            Include internal members.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.Protected">
            <summary>
            Include protected members.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.PrivateProtected">
            <summary>
            Include private protected members.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.Private">
            <summary>
            Include private members.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.PublicGet">
            <summary>
            Include properties with a public getter.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.InternalGet">
            <summary>
            Include properties with a internal getter.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.ProtectedInternalGet">
            <summary>
            Include properties with a protected internal getter.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.ProtectedGet">
            <summary>
            Include properties with a protected getter.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.PrivateProtectedGet">
            <summary>
            Include properties with a private protected getter.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.PrivateGet">
            <summary>
            Include properties with a private getter.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.PublicSet">
            <summary>
            Include properties with a public setter.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.InternalSet">
            <summary>
            Include properties with a internal setter.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.ProtectedInternalSet">
            <summary>
            Include properties with a protected internal setter.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.ProtectedSet">
            <summary>
            Include properties with a protected setter.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.PrivateProtectedSet">
            <summary>
            Include properties with a private protected setter.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.PrivateSet">
            <summary>
            Include properties with a private setter.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAccessModifiers.All">
            <summary>
            Include members having any supported access modifier.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Reflection.Recipes.MemberAttributes">
            <summary>
            Scopes the search for members based on the presence or absence of certain attributes on those members.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAttributes.None">
            <summary>
            None (default).
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAttributes.CompilerGenerated">
            <summary>
            Include compiler-generated members.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAttributes.NotCompilerGenerated">
            <summary>
            Include members that are not compiler-generated.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberAttributes.All">
            <summary>
            Include members having or not having all special attributes.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Reflection.Recipes.MemberKinds">
            <summary>
            Scopes the search for members based on the kind of member.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberKinds.None">
            <summary>
            None (default).
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberKinds.Field">
            <summary>
            Include fields.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberKinds.Property">
            <summary>
            Include properties.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberKinds.Constructor">
            <summary>
            Include constructors.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberKinds.Method">
            <summary>
            Include methods.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberKinds.Event">
            <summary>
            Include events.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberKinds.NestedType">
            <summary>
            Include nested types.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberKinds.All">
            <summary>
            Include all kinds of members.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Reflection.Recipes.MemberMutability">
            <summary>
            Scopes the search for members based on mutability.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberMutability.None">
            <summary>
            None (default).
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberMutability.Applicable">
            <summary>
            Include members where mutability is applicable (i.e. fields and properties).
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberMutability.NotApplicable">
            <summary>
            Include members where mutability is not applicable (i.e. constructors, methods, events).
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberMutability.Readable">
            <summary>
            Include readable properties and all fields, otherwise not applicable.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberMutability.Writable">
            <summary>
            Include writable members.
            This is only applicable to fields (readonly and const fields are NOT considered writable) and properties.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberMutability.NotWritable">
            <summary>
            Include members that cannot be written-to.
            This is only applicable to fields (readonly and const fields are considered to be not writable) and properties.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberMutability.NotReadable">
            <summary>
            Include properties that are not readable.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberMutability.ReadOnlyOrConst">
            <summary>
            Include members that cannot be written-to.
            This is only applicable to fields (readonly and const) and properties.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberMutability.WriteOnly">
            <summary>
            Include properties that are not readable.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberMutability.All">
            <summary>
            Include members where mutability is not applicable and where applicable,
            include members with any kind of mutability.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Reflection.Recipes.MemberOwners">
            <summary>
            Scopes the search for members based on who owns the member.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberOwners.None">
            <summary>
            None (default).
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberOwners.Instance">
            <summary>
            Include members owned by an object.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberOwners.Static">
            <summary>
            Include members owned by the type itself.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberOwners.All">
            <summary>
            Include members owned by an object or owned by the type itself.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Reflection.Recipes.MemberRelationships">
            <summary>
            Scopes the search for members based on their relationship to a specified type.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberRelationships.None">
            <summary>
            None (default).
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberRelationships.DeclaredInType">
            <summary>
            Include members declared in the specified type.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberRelationships.InheritedByType">
            <summary>
            Include members inherited by the specified type.
            Private members of base types are not inherited and would not be
            returned when using this flag; <see cref="F:OBeautifulCode.Reflection.Recipes.MemberRelationships.DeclaredInAncestorTypes"/>.
            </summary>
            <remarks>
            Inherited members' <see cref="P:System.Reflection.MemberInfo.ReflectedType"/> will be the specified type,
            NOT the <see cref="P:System.Reflection.MemberInfo.DeclaringType"/>.  There is a subtle but consequential
            difference between the members returned when this flag is set versus those returned
            when <see cref="F:OBeautifulCode.Reflection.Recipes.MemberRelationships.DeclaredInAncestorTypes"/> is set
            (if both are set, then only <see cref="F:OBeautifulCode.Reflection.Recipes.MemberRelationships.DeclaredInAncestorTypes"/> is used).
            Because the <see cref="P:System.Reflection.MemberInfo.ReflectedType"/> type is different, the members
            may have different property values.  For example, if a base class contains a public
            property with a private setter, the <see cref="P:System.Reflection.PropertyInfo.SetMethod"/> will be
            null using <see cref="F:OBeautifulCode.Reflection.Recipes.MemberRelationships.InheritedByType"/>, and not null when using <see cref="F:OBeautifulCode.Reflection.Recipes.MemberRelationships.DeclaredInAncestorTypes"/>.
            The property will NOT be considered <see cref="F:OBeautifulCode.Reflection.Recipes.MemberMutability.Writable"/> when
            <see cref="P:System.Reflection.PropertyInfo.SetMethod"/> is null.
            </remarks>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberRelationships.DeclaredInAncestorTypes">
            <summary>
            Include members declared in all ancestor types.
            This would include private members of base types.
            </summary>
            <remarks>
            This flag supersedes <see cref="F:OBeautifulCode.Reflection.Recipes.MemberRelationships.InheritedByType"/>.
            Unlike <see cref="F:OBeautifulCode.Reflection.Recipes.MemberRelationships.InheritedByType"/>, members declared in ancestor types will
            have a <see cref="P:System.Reflection.MemberInfo.ReflectedType"/> that equals <see cref="P:System.Reflection.MemberInfo.DeclaringType"/>
            See remarks for <see cref="F:OBeautifulCode.Reflection.Recipes.MemberRelationships.InheritedByType"/> about why/when this matters.
            </remarks>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberRelationships.DeclaredInImplementedInterfaceTypes">
            <summary>
            Include members declared in all interfaces implemented by the specified type.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberRelationships.DeclaredOrInherited">
            <summary>
            Include members declared in or inherited by the specified type.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberRelationships.DeclaredInTypeOrAncestorTypes">
            <summary>
            Include members that are declared in the specified type or declared in all ancestor types.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.MemberRelationships.DeclaredInTypeOrImplementedInterfaces">
            <summary>
            Include members that are declared in the specified type or are declared in all interfaces implemented by the specified type.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Reflection.Recipes.OrderMembersBy">
            <summary>
            Specifies how to order members in a method that returns members.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.OrderMembersBy.None">
            <summary>
            None (default).  No particular order.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.OrderMembersBy.MemberName">
            <summary>
            Order by member name.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.OrderMembersBy.DeclaringTypeDerivationPath">
            <summary>
            Order by the declaring type derivation path
            (e.g. members declared in type.BaseType.BaseType, followed by type.BaseType, followed by the type itself).
            </summary>
        </member>
        <member name="F:OBeautifulCode.Reflection.Recipes.OrderMembersBy.DeclaringTypeDerivationPathThenByMemberName">
            <summary>
            Order first by the declaring type derivation path
            (e.g. members declared in type.BaseType.BaseType, followed by type.BaseType, followed by the type itself)
            and then by member name within each of these.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Reflection.Recipes.ReflectionHelper">
            <summary>
            Provides useful methods related to reflection.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetAttribute``1(System.Type)">
            <summary>
            Gets the specified type of attribute, applied to a specified type.
            </summary>
            <typeparam name="TAttribute">The type of the attribute to return.</typeparam>
            <param name="type">The type to scope the attribute search to.</param>
            <returns>
            The attribute of type <typeparamref name="TAttribute"/> that has been applied
            to <paramref name="type"/> or null if no such attribute has been applied.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="type"/> has multiple attributes of type <typeparamref name="TAttribute"/>.  Consider calling <see cref="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetAttributes``1(System.Type)"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetAttributes``1(System.Type)">
            <summary>
            Gets all attributes of a specified type that have been applied to some type.
            Only useful when the attribute is configured such that more one instance can be applied.
            </summary>
            <remarks>
            adapted from <a href="http://stackoverflow.com/a/2656211/356790"/>.
            </remarks>
            <typeparam name="TAttribute">The type of the attributes to return.</typeparam>
            <param name="type">The type to scope the attribute search to.</param>
            <returns>
            A collection all attributes of the specified type that have been applied to the specified
            enum value or an empty collection if no such attribute has been applied.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetAttributeOnEnumValue``1(System.Object)">
            <summary>
            Gets the specified type of attribute, applied to a specific enum value.
            </summary>
            <typeparam name="TAttribute">The type of the attribute to return.</typeparam>
            <param name="enumValue">The enum value to scope the attribute search to.</param>
            <returns>
            An attribute object of the specified type that has been applied to the specified
            enum value or null if no such attribute has been applied.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumValue"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="enumValue"/> is not an Enum.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="enumValue"/> has multiple attributes of type <typeparamref name="TAttribute"/>.  Consider calling <see cref="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetAttributesOnEnumValue``1(System.Enum)"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetAttributeOnEnumValue``1(System.Enum)">
            <summary>
            Gets the specified type of attribute, applied to a specific enum value.
            </summary>
            <typeparam name="TAttribute">The type of the attribute to return.</typeparam>
            <param name="enumValue">The enum value to scope the attribute search to.</param>
            <returns>
            An attribute object of the specified type that has been applied to the specified
            enum value or null if no such attribute has been applied.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumValue"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="enumValue"/> has multiple attributes of type <typeparamref name="TAttribute"/>.  Consider calling <see cref="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetAttributesOnEnumValue``1(System.Enum)"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetAttributesOnEnumValue``1(System.Object)">
            <summary>
            Gets all attributes of the specified type that have been applied to a specific enum value.
            Only useful when the attribute is configured such that more one instance can be applied to an enum value.
            </summary>
            <typeparam name="TAttribute">The type of the attributes to return.</typeparam>
            <param name="enumValue">The enum value to scope the attribute search to.</param>
            <returns>
            A collection all attributes of the specified type that have been applied to the specified
            enum value or an empty collection if no such attribute has been applied.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumValue"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="enumValue"/> is not an Enum.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetAttributesOnEnumValue``1(System.Enum)">
            <summary>
            Gets all attributes of the specified type that have been applied to a specific enum value.
            Only useful when the attribute is configured such that more one instance can be applied to an enum value.
            </summary>
            <remarks>
            adapted from <a href="http://stackoverflow.com/a/9276348/356790"/>.
            </remarks>
            <typeparam name="TAttribute">The type of the attributes to return.</typeparam>
            <param name="enumValue">The enum value to scope the attribute search to.</param>
            <returns>
            A collection all attributes of the specified type that have been applied to the specified
            enum value or an empty collection if no such attribute has been applied.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumValue"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.HasAttribute``1(System.Type,System.Boolean)">
            <summary>
            Determines if an attribute of a specified type that have been applied to some type.
            </summary>
            <typeparam name="TAttribute">The type of the attributes to search for.</typeparam>
            <param name="type">The type to scope the attribute search to.</param>
            <param name="throwOnMultiple">
            Optional.  Determines if method should throw when multiple instances of the specified
            attribute have been applied to the specified type.  Default is true
            (it's typically unlikely that multiple attributes of the same type are applied to a type).
            </param>
            <returns>
            True if the attribute has been applied to the specified type, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="throwOnMultiple"/> is true and <paramref name="type"/> has multiple attributes of type <typeparamref name="TAttribute"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.HasAttributeOnEnumValue``1(System.Object,System.Boolean)">
            <summary>
            Determines if an attribute of the specified type has been applied to a specific enum value.
            </summary>
            <typeparam name="TAttribute">The type of the attributes to search for.</typeparam>
            <param name="enumValue">The enum value to scope the attribute search to.</param>
            <param name="throwOnMultiple">
            Optional.  Determines if method should throw when multiple instances of the specified
            attribute have been applied to the specified enum value.  Default is true
            (it's typically unlikely that multiple attributes of the same type are applied to an enum value).
            </param>
            <returns>
            True if the attribute has been applied to the specified enum value, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumValue"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="enumValue"/> is not an Enum.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="throwOnMultiple"/> is true and <paramref name="enumValue"/> has multiple attributes of type <typeparamref name="TAttribute"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.HasAttributeOnEnumValue``1(System.Enum,System.Boolean)">
            <summary>
            Determines if an attribute of the specified type that has been applied to a specific enum value.
            </summary>
            <typeparam name="TAttribute">The type of the attributes to search for.</typeparam>
            <param name="enumValue">The enum value to scope the attribute search to.</param>
            <param name="throwOnMultiple">
            Optional.  Determines if method should throw when multiple instances of the specified
            attribute have been applied to the specified enum value.  Default is true
            (it's typically unlikely that multiple attributes of the same type are applied to an enum value).
            </param>
            <returns>
            True if the attribute has been applied to the specified enum value, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="enumValue"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetConstructorsFiltered(System.Type,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberAttributes,OBeautifulCode.Reflection.Recipes.OrderMembersBy)">
            <summary>
            Gets the constructors of the specified type,
            with various options to control the scope of constructors included and optionally order the constructors.
            </summary>
            <param name="type">The type.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <param name="orderMembersBy">OPTIONAL value that specifies how to the members.  DEFAULT is return the members in no particular order.</param>
            <returns>
            The constructors in the specified order.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.Construct(System.Type,System.Object[])">
            <summary>
            Constructs an object of the specified type.
            </summary>
            <param name="type">The type of object to construct.</param>
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of the constructor to invoke.
            If an empty array or null, the constructor that takes no parameters (the default constructor) is invoked.
            </param>
            <returns>
            A reference to the newly created object.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.Exception">Various exceptions thrown by <see cref="M:System.Activator.CreateInstance(System.Type,System.Object[])"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.Construct``1(System.Object[])">
            <summary>
            Constructs an object of the specified type.
            </summary>
            <typeparam name="T">The type of object to create.</typeparam>
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of the constructor to invoke.
            If an empty array or null, the constructor that takes no parameters (the default constructor) is invoked.
            </param>
            <returns>
            A reference to the newly created object.
            </returns>
            <exception cref="T:System.Exception">Any exception thrown by <see cref="M:System.Activator.CreateInstance(System.Type,System.Object[])"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.Construct``1(System.Type,System.Object[])">
            <summary>
            Constructs an object of the specified type.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="type">The type of object to construct.</param>
            <param name="parameters">
            An array of arguments that match in number, order, and type the parameters of the constructor to invoke.
            If an empty array or null, the constructor that takes no parameters (the default constructor) is invoked.
            </param>
            <returns>
            A reference to the newly created object.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.Exception">Any exception thrown by <see cref="M:System.Activator.CreateInstance(System.Type,System.Object[])"/>.</exception>
            <exception cref="T:System.InvalidCastException">The created object could not be cast to a <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetConstructorsMatchedToProperties(System.Type,System.Collections.Generic.IReadOnlyCollection{System.Reflection.PropertyInfo},OBeautifulCode.Reflection.Recipes.ConstructorsMatchedToPropertiesStrategy,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberRelationships)">
            <summary>
            Finds constructors having parameters that correspond to a set of properties, matching on name (case-insensitive) and type.
            </summary>
            <remarks>
            For type matching, we check that a constructor parameter type can be assigned it's corresponding property's type
            and vice-versa.  If either direction succeeds, we consider it a match.
            </remarks>
            <param name="classType">The class type.</param>
            <param name="properties">The properties.</param>
            <param name="matchStrategy">Determines which constructors will be deemed as matching.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for constructors based on access modifiers.  DEFAULT is to include public constructors.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for constructors based on their relationship to <paramref name="classType"/>.  DEFAULT is to include constructors declared on the type.</param>
            <returns>
            The matching constructors, or an empty collection if there are no matches.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="classType"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="classType"/> is not a class.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="properties"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="properties"/> has a null element.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="properties"/> contains two or more members with the same name.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="matchStrategy"/> is <see cref="F:OBeautifulCode.Reflection.Recipes.ConstructorsMatchedToPropertiesStrategy.Invalid"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.IsDefaultConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            Determines if the specified constructor is the default (parameterless) constructor.
            </summary>
            <param name="constructor">The constructor.</param>
            <returns>
            true if the specified constructor is the default (parameterless) constructor; otherwise false.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetTypesHaving``1(System.Reflection.Assembly,System.Func{``0,System.Boolean})">
            <summary>
            Gets all types in an assembly that have an attribute of a specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute to search for.</typeparam>
            <param name="assembly">The assembly to search.</param>
            <param name="attributeFilter">
            Optional.  When provided, requires that this filter
            return true when attributes of the specified type are passed-in,
            before the type having the specified attribute is returned.
            </param>
            <returns>
            The types in an assembly where the specified attribute has been
            applied at least one, or an empty collection if none of the
            types in the assembly have that attribute.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="assembly"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetEnumValuesHaving``2(System.Func{``1,System.Boolean})">
            <summary>
            Gets all values/members of an enum that have an attribute of a specified type.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <typeparam name="TAttribute">The type of attribute to search for.</typeparam>
            <param name="attributeFilter">
            Optional.  When provided, requires that this filter
            return true when attributes of the specified type are passed-in,
            before the enum value having the specified attribute is returned.
            </param>
            <returns>
            The values/members of a specified enum values where the specified
            attribute has been applied at least one, or an empty collection if none of the specified
            enum values have that attribute.
            </returns>
            <exception cref="T:System.ArgumentException"><typeparamref name="TEnum"/> is not an enum.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetEnumValuesHaving``1(System.Type,System.Func{``0,System.Boolean})">
            <summary>
            Gets all values/members of an enum that have an attribute of a specified type.
            </summary>
            <typeparam name="TAttribute">The type of attribute to search for.</typeparam>
            <param name="enumType">The type of the enum.</param>
            <param name="attributeFilter">
            Optional.  When provided, requires that this filter
            return true when attributes of the specified type are passed-in,
            before the enum value having the specified attribute is returned.
            </param>
            <returns>
            The values/members of a specified enum values where the specified
            attribute has been applied at least one, or an empty collection if none of the specified
            enum values have that attribute.
            </returns>
            <exception cref="T:System.ArgumentException"><paramref name="enumType"/> is not an enum.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetFieldsFiltered(System.Type,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes,OBeautifulCode.Reflection.Recipes.OrderMembersBy)">
            <summary>
            Gets the fields of the specified type,
            with various options to control the scope of fields included and optionally order the fields.
            </summary>
            <param name="type">The type.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <param name="orderMembersBy">OPTIONAL value that specifies how to the members.  DEFAULT is return the members in no particular order.</param>
            <returns>
            The fields in the specified order.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetFieldFiltered(System.Type,System.String,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Reflection.FieldInfo"/> for the specified field.
            </summary>
            <param name="type">The type.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <param name="throwIfNotFound">OPTIONAL value indicating whether to throw if no fields are found.  DEFAULT is to throw..</param>
            <returns>
            The <see cref="T:System.Reflection.FieldInfo"/> or null if no fields are found and <paramref name="throwIfNotFound"/> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">There is no field named <paramref name="fieldName"/> on the object type using the specified binding constraints and <paramref name="throwIfNotFound"/> is true.</exception>
            <exception cref="T:System.ArgumentException">There is more than one field named <paramref name="fieldName"/> on the object type using the specified binding constraints.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetFieldValue``1(System.Object,System.String,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes)">
            <summary>
            Gets the value of a field.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="item">The object.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to the <paramref name="item"/> Type.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <returns>
            The value of the field.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">There is no field named <paramref name="fieldName"/> on the object type using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">There is more than one field named <paramref name="fieldName"/> on the object type using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">The field does not have a get method.</exception>
            <exception cref="T:System.InvalidCastException">The field is not of the specified type.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetFieldValue(System.Object,System.String,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes)">
            <summary>
            Gets the value of a field.
            </summary>
            <param name="item">The object.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to the <paramref name="item"/> Type.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <returns>
            The value of the field.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">There is no field named <paramref name="fieldName"/> on the object type using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">There is more than one field named <paramref name="fieldName"/> on the object type using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">The field does not have a get method.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetStaticFieldValue``1(System.Type,System.String,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes)">
            <summary>
            Gets the value of a static field.
            </summary>
            <typeparam name="T">The type of the field.</typeparam>
            <param name="type">The type that contains the field.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <returns>
            The value of the field.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">There is no field named <paramref name="fieldName"/> on type <paramref name="type"/> using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">There is more than one field named <paramref name="fieldName"/> on type <paramref name="type"/> using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">The field does not have a get method.</exception>
            <exception cref="T:System.InvalidCastException">The field is not of the specified type.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetStaticFieldValue(System.Type,System.String,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes)">
            <summary>
            Gets the value of a field on a static type.
            </summary>
            <param name="type">The type that contains the field.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <returns>
            The value of the field.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">There is no field named <paramref name="fieldName"/> on type <paramref name="type"/> using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">There is more than one field named <paramref name="fieldName"/> on type <paramref name="type"/> using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">The field does not have a get method.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.HasField(System.Type,System.String,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes)">
            <summary>
            Determines if a type has a field of the specified field name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="fieldName">The name of the field to check for.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <returns>
            true if the type has a field of the specified field name, false if not.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is whitespace.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.IsConstField(System.Reflection.FieldInfo)">
            <summary>
            Determines if the specified field is const (not readonly).
            </summary>
            <param name="fieldInfo">The field.</param>
            <returns>
            true if the specified field is const (not readonly), otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldInfo"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.IsNotWritableField(System.Reflection.FieldInfo)">
            <summary>
            Determines if the specified field is not writable (is readonly or const).
            </summary>
            <param name="fieldInfo">The field.</param>
            <returns>
            true if the specified field is not writable, otherwise false.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.IsReadOnlyField(System.Reflection.FieldInfo)">
            <summary>
            Determines if the specified field is readonly (not const).
            </summary>
            <param name="fieldInfo">The field.</param>
            <returns>
            true if the specified field is readonly (not const), otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldInfo"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.IsReadOnlyOrConstField(System.Reflection.FieldInfo)">
            <summary>
            Determines if the specified field is readonly or const.
            </summary>
            <param name="fieldInfo">The field.</param>
            <returns>
            true if the specified field is readonly or const, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldInfo"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.IsWritableField(System.Reflection.FieldInfo)">
            <summary>
            Determines if the specified field is writable (not readonly and not const).
            </summary>
            <param name="fieldInfo">The field.</param>
            <returns>
            true if the specified field is writable, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldInfo"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.SetFieldValue(System.Object,System.String,System.Object,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes)">
            <summary>
            Sets a field's value.
            </summary>
            <param name="item">The object.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="value">The value to set the field to.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to the <paramref name="item"/> Type.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">There is no field named <paramref name="fieldName"/> on the object type using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">There is more than one field named <paramref name="fieldName"/> on the object type using the specified binding constraints.</exception>
            <exception cref="T:System.InvalidCastException">Unable to assign null to the field's type.</exception>
            <exception cref="T:System.InvalidCastException">Unable to assign <paramref name="value"/> type to the field's type.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.SetStaticFieldValue(System.Type,System.String,System.Object,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes)">
            <summary>
            Sets a static field's value.
            </summary>
            <param name="type">The type that contains the field.</param>
            <param name="fieldName">The name of the field.</param>
            <param name="value">The value to set the field to.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="fieldName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="fieldName"/> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">There is no field named <paramref name="fieldName"/> on type <paramref name="type"/> using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">There is more than one field named <paramref name="fieldName"/> on type <paramref name="type"/> using the specified binding constraints.</exception>
            <exception cref="T:System.InvalidCastException">Unable to assign null to the field's type.</exception>
            <exception cref="T:System.InvalidCastException">Unable to assign <paramref name="value"/> type to the field's type.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetMembersFiltered(System.Type,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberKinds,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes,OBeautifulCode.Reflection.Recipes.OrderMembersBy)">
            <summary>
            Gets the members (fields, properties, constructors, methods, and events) of the specified type,
            with various options to control the scope of members included and optionally order the members.
            </summary>
            <param name="type">The type.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberKinds">OPTIONAL value that scopes the search for members based on the kind of member.  DEFAULT is to include all kinds of members.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <param name="orderMembersBy">OPTIONAL value that specifies how to the members.  DEFAULT is return the members in no particular order.</param>
            <returns>
            The members in the specified order.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.IsCompilerGenerated(System.Reflection.MemberInfo)">
            <summary>
            Determines if the specified member is compiler-generated.
            </summary>
            <param name="memberInfo">The member info.</param>
            <returns>
            True if the member is compiler-generated, otherwise false.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the underlying type of the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberInfo">The member info.</param>
            <returns>
            The underlying type of the specified <see cref="T:System.Reflection.MemberInfo"/>.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetMethodsFiltered(System.Type,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberAttributes,OBeautifulCode.Reflection.Recipes.OrderMembersBy)">
            <summary>
            Gets the methods of the specified type,
            with various options to control the scope of methods included and optionally order the methods.
            </summary>
            <param name="type">The type.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <param name="orderMembersBy">OPTIONAL value that specifies how to the members.  DEFAULT is return the members in no particular order.</param>
            <returns>
            The methods in the specified order.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetInterfaceDeclaredAndImplementedMethods(System.Type)">
            <summary>
            Gets the specified interface type's methods along with the methods of all implemented interfaces.
            </summary>
            <param name="interfaceType">The type of the interface.</param>
            <returns>
            The methods declared on the specified interface along with the methods of all implemented interfaces.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="interfaceType"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="interfaceType"/> is not an interface type.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetMethodFiltered(System.Type,System.String,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberAttributes,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Reflection.MethodInfo"/> for the specified method.
            </summary>
            <param name="type">The type.</param>
            <param name="methodName">The name of the method.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <param name="throwIfNotFound">OPTIONAL value indicating whether to throw if no methods are found.  DEFAULT is to throw..</param>
            <returns>
            The <see cref="T:System.Reflection.MethodInfo"/> or null if no methods are found and <paramref name="throwIfNotFound"/> is false
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="methodName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">There is no method named <paramref name="methodName"/> on the object type using the specified binding constraints and <paramref name="throwIfNotFound"/> is true.</exception>
            <exception cref="T:System.ArgumentException">There is more than one method named <paramref name="methodName"/> on the object type using the specified binding constraints.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.HasMethod(System.Type,System.String,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberAttributes)">
            <summary>
            Determines if a type has a method of the specified method name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="methodName">The name of the method to check for.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <returns>
            true if the type has a method of the specified method name, false if not.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="methodName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="methodName"/> is whitespace.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetPropertiesFiltered(System.Type,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes,OBeautifulCode.Reflection.Recipes.OrderMembersBy)">
            <summary>
            Gets the properties of the specified type,
            with various options to control the scope of properties included and optionally order the properties.
            </summary>
            <param name="type">The type.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <param name="orderMembersBy">OPTIONAL value that specifies how to the members.  DEFAULT is return the members in no particular order.</param>
            <returns>
            The properties in the specified order.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetPropertyFiltered(System.Type,System.String,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes,System.Boolean)">
            <summary>
            Gets the <see cref="T:System.Reflection.PropertyInfo"/> for the specified property.
            </summary>
            <param name="type">The type.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <param name="throwIfNotFound">OPTIONAL value indicating whether to throw if no properties are found.  DEFAULT is to throw..</param>
            <returns>
            The <see cref="T:System.Reflection.PropertyInfo"/> or null if no properties are found and <paramref name="throwIfNotFound"/> is false
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">There is no property named <paramref name="propertyName"/> on the object type using the specified binding constraints and <paramref name="throwIfNotFound"/> is true.</exception>
            <exception cref="T:System.ArgumentException">There is more than one property named <paramref name="propertyName"/> on the object type using the specified binding constraints.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetPropertyValue``1(System.Object,System.String,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes)">
            <summary>
            Gets the value of a property.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="item">The object.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to the <paramref name="item"/> Type.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <returns>
            The value of the property.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">There is no property named <paramref name="propertyName"/> on the object type using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">There is more than one property named <paramref name="propertyName"/> on the object type using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">The property does not have a get method.</exception>
            <exception cref="T:System.InvalidCastException">The property is not of the specified type.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetPropertyValue(System.Object,System.String,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes)">
            <summary>
            Gets the value of a property.
            </summary>
            <param name="item">The object.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to the <paramref name="item"/> Type.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <returns>
            The value of the property.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">There is no property named <paramref name="propertyName"/> on the object type using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">There is more than one property named <paramref name="propertyName"/> on the object type using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">The property does not have a get method.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetStaticPropertyValue``1(System.Type,System.String,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes)">
            <summary>
            Gets the value of a static property.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="type">The type that contains the property.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <returns>
            The value of the property.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">There is no property named <paramref name="propertyName"/> on type <paramref name="type"/> using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">There is more than one property named <paramref name="propertyName"/> on type <paramref name="type"/> using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">The property does not have a get method.</exception>
            <exception cref="T:System.InvalidCastException">The property is not of the specified type.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.GetStaticPropertyValue(System.Type,System.String,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes)">
            <summary>
            Gets the value of a property on a static type.
            </summary>
            <param name="type">The type that contains the property.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <returns>
            The value of the property.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">There is no property named <paramref name="propertyName"/> on type <paramref name="type"/> using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">There is more than one property named <paramref name="propertyName"/> on type <paramref name="type"/> using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">The property does not have a get method.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.HasProperty(System.Type,System.String,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes)">
            <summary>
            Determines if a type has a property of the specified property name.
            </summary>
            <param name="type">The type to check.</param>
            <param name="propertyName">The name of the property to check for.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <returns>
            true if the type has a property of the specified property name, false if not.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is whitespace.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.IsNotWritableProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines if the specified property is not writable (is read-only).
            </summary>
            <param name="propertyInfo">The property.</param>
            <returns>
            true if the specified property is not writable, otherwise false.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.IsNotReadableProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines if the specified property is not readable (is write-only).
            </summary>
            <param name="propertyInfo">The property.</param>
            <returns>
            true if the specified property is not readable, otherwise false.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.IsReadableProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines if the specified property is readable (has a getter).
            </summary>
            <param name="propertyInfo">The property.</param>
            <returns>
            true if the specified property is readable, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.IsReadOnlyProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines if the specified property is a read-only (has no setter).
            </summary>
            <param name="propertyInfo">The property.</param>
            <returns>
            true if the specified property is read-only, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.IsReadOnlyAutoProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines if the specified property is a read-only auto property
            (i.e. MyProperty { get; }).
            </summary>
            <param name="propertyInfo">The property.</param>
            <returns>
            true if the specified property is a read-only auto-property, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.IsWritableProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines if the specified property is writable (has a setter).
            </summary>
            <param name="propertyInfo">The property.</param>
            <returns>
            true if the specified property is writable, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.IsWriteOnlyProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines if the specified property is a write-only (has no getter).
            </summary>
            <param name="propertyInfo">The property.</param>
            <returns>
            true if the specified property is write-only, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyInfo"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.SetPropertyValue(System.Object,System.String,System.Object,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberOwners,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes)">
            <summary>
            Sets a property's value.
            </summary>
            <param name="item">The object.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The value to set the property to.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to the <paramref name="item"/> Type.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberOwners">OPTIONAL value that scopes the search for members based on who owns the member.  DEFAULT is to include members owned by an object or owned by the type itself.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="item"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">There is no property named <paramref name="propertyName"/> on the object type using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">There is more than one property named <paramref name="propertyName"/> on the object type using the specified binding constraints.</exception>
            <exception cref="T:System.InvalidCastException">Unable to assign null to the property's type.</exception>
            <exception cref="T:System.InvalidCastException">Unable to assign <paramref name="value"/> type to the property's type.</exception>
        </member>
        <member name="M:OBeautifulCode.Reflection.Recipes.ReflectionHelper.SetStaticPropertyValue(System.Type,System.String,System.Object,OBeautifulCode.Reflection.Recipes.MemberRelationships,OBeautifulCode.Reflection.Recipes.MemberAccessModifiers,OBeautifulCode.Reflection.Recipes.MemberMutability,OBeautifulCode.Reflection.Recipes.MemberAttributes)">
            <summary>
            Sets a static property's value.
            </summary>
            <param name="type">The type that contains the property.</param>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The value to set the property to.</param>
            <param name="memberRelationships">OPTIONAL value that scopes the search for members based on their relationship to <paramref name="type"/>.  DEFAULT is to include the members declared in or inherited by the specified type.</param>
            <param name="memberAccessModifiers">OPTIONAL value that scopes the search for members based on access modifiers.  DEFAULT is to include members having any supported access modifier.</param>
            <param name="memberMutability">OPTIONAL value that scopes the search for members based on mutability.  DEFAULT is to include members where mutability is not applicable and where applicable, include members with any kind of mutability.</param>
            <param name="memberAttributes">OPTIONAL value that scopes the search for members based on the presence or absence of certain attributes on those members.  DEFAULT is to include members that are not compiler generated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="propertyName"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="propertyName"/> is whitespace.</exception>
            <exception cref="T:System.ArgumentException">There is no property named <paramref name="propertyName"/> on type <paramref name="type"/> using the specified binding constraints.</exception>
            <exception cref="T:System.ArgumentException">There is more than one property named <paramref name="propertyName"/> on type <paramref name="type"/> using the specified binding constraints.</exception>
            <exception cref="T:System.InvalidCastException">Unable to assign null to the property's type.</exception>
            <exception cref="T:System.InvalidCastException">Unable to assign <paramref name="value"/> type to the property's type.</exception>
        </member>
        <member name="T:OBeautifulCode.String.Recipes.StringExtensions">
            <summary>
            Adds some convenient extension methods to strings.
            </summary>
        </member>
        <member name="F:OBeautifulCode.String.Recipes.StringExtensions.DateTimeKindToPreferredFormatStringMap">
            <summary>
            Specifies a map of <see cref="T:System.DateTimeKind"/> to the preferred format string to use for that kind.
            </summary>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.AppendMissing(System.String,System.String)">
            <summary>
            Appends one string to the another (base) if the base string
            doesn't already end with the string to append.
            </summary>
            <param name="value">The base string.</param>
            <param name="shouldEndWith">The string to append.</param>
            <remarks>
            If the string to append is the empty string, this method will always return the base string.
            </remarks>
            <returns>
            The inputted string where the last character is a backslash.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="shouldEndWith"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.FromCsv(System.String,System.String)">
            <summary>
            Parses a CSV string and returns the values.
            </summary>
            <param name="value">The CSV to parse.</param>
            <param name="nullValueEncoding">Optional value indicating how nulls are encoded.  Defaulted to null, which results in a list that never contains null.</param>
            <returns>
            Returns the values contained within a CSV.
            If <paramref name="value"/> is null, returns an empty list.
            </returns>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.IsAlphanumeric(System.String)">
            <summary>
            Determines if a string is alpha numeric.
            </summary>
            <param name="value">The string to evaluate.</param>
            <remarks>
            An empty string ("") is considered alpha-numeric.
            </remarks>
            <returns>
            Returns true if the string is alpha-numeric, false if not.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.IsAlphabetic(System.String)">
            <summary>
            Determines if a string is alphabetic.
            </summary>
            <param name="value">The string to evaluate.</param>
            <remarks>
            An empty string ("") is considered alphabetic.
            </remarks>
            <returns>
            Returns true if the string is alphabetic, false if not.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.IsAsciiPrintable(System.String)">
            <summary>
            Determines if a string is in the ASCII printable character set.
            </summary>
            <param name="value">The string to evaluate.</param>
            <remarks>
            An empty string ("") is considered to be in the printable set.
            </remarks>
            <returns>
            Returns true if all of the characters in the string are printable; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ReplaceCaseInsensitive(System.String,System.String,System.String)">
            <summary>
            Performs a fast case-insensitive string replacement.
            </summary>
            <remarks>
            adapted from <a href="http://www.codeproject.com/KB/string/fastestcscaseinsstringrep.aspx"/>
            If newValue is null, all occurrences of oldValue are removed.
            </remarks>
            <param name="value">the string being searched.</param>
            <param name="oldValue">string to be replaced.</param>
            <param name="newValue">string to replace all occurrences of oldValue.</param>
            <returns>
            A string where the case-insensitive string replacement has been applied.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="oldValue"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="oldValue"/> is an empty string.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ReplaceTokens(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Replaces tokens in a specified string value with the specified replacement values.
            </summary>
            <remarks>
            DO NOT use this method if your replacement values contain tokens themselves.
            This method does not process tokens in any guaranteed order.
            </remarks>
            <param name="value">The string containing tokens to replace.</param>
            <param name="tokenToReplacementValueMap">
            A map of the case-sensitive tokens to their replacement values.
            If a replacement value is null, an empty string will be used.
            </param>
            <returns>
            The result of replacing all tokens in <paramref name="value"/> with their replacement value.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tokenToReplacementValueMap"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.SplitIntoChunksOfLength(System.String,System.Int32)">
            <summary>
            Splits a string into chunks of a specified length.
            </summary>
            <param name="value">The string to split.</param>
            <param name="lengthPerChunk">The length of each chunk when splitting the specified string.</param>
            <returns>
            <paramref name="value"/> split into an ordered list of chunks, where each chunk is of length <paramref name="lengthPerChunk"/>.
            If the length of <paramref name="value"/> cannot be evenly divided by <paramref name="lengthPerChunk"/>, then the last
            chunk will contain less characters.  No characters are truncated.  If <paramref name="value"/> is the empty string
            then an empty list is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lengthPerChunk"/> is &lt;= 0.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToAlphanumeric(System.String)">
            <summary>
            Converts the specified string to an alpha-numeric string
            by removing all non-alpha-numeric characters.
            </summary>
            <param name="value">The string to convert.</param>
            <remarks>
            An empty string ("") is considered alpha-numeric.
            </remarks>
            <returns>
            The specified string with all non-alpha-numeric characters removed.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToAsciiBytes(System.String)">
            <summary>
            Encodes all characters in a given string to an array of bytes encoded in ASCII.
            </summary>
            <param name="value">The string to encode.</param>
            <returns>byte array representing the string in ASCII.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            Converts a string to a byte-array with a given encoding.
            </summary>
            <param name="value">The string to encode.</param>
            <param name="encoding">The encoding to use.</param>
            <returns>byte array representing the string in a given encoding.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToCsvSafe(System.String)">
            <summary>
            Makes a string safe to insert as a value into a
            comma separated values (CSV) object such as a file.
            </summary>
            <remarks>
            Here are the rules for making a string CSV safe:
            <a href="http://en.wikipedia.org/wiki/Comma-separated_values" />.
            </remarks>
            <param name="value">The string to make safe.</param>
            <returns>
            Returns a string that is safe to insert into a CSV object.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToLowerTrimmed(System.String)">
            <summary>
            Converts a string to lower-case and removes all leading and
            trailing white-space characters, using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="value">The string to operate on.</param>
            <returns>The string converted to lower-case with all leading and trailing white-space characters removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToLowerTrimmed(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts a string to lower-case and removes all leading and
            trailing white-space characters, using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="value">The string to operate on.</param>
            <param name="cultureInfo">Provides information about the specific culture.</param>
            <returns>The string converted to lower-case with all leading and trailing white-space characters removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="cultureInfo"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToUpperTrimmed(System.String)">
            <summary>
            Converts a string to upper-case and removes all leading and
            trailing white-space characters, using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="value">The string to operate on.</param>
            <returns>The string converted to upper-case with all leading and trailing white-space characters removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToUpperTrimmed(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts a string to upper-case and removes all leading and
            trailing white-space characters, using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="value">The string to operate on.</param>
            <param name="cultureInfo">Provides information about the specific culture.</param>
            <returns>The string converted to upper-case with all leading and trailing white-space characters removed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="cultureInfo"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToLowerFirstCharacter(System.String)">
            <summary>
            Converts the first character of the specified string to lower-case, using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="value">The string to operate on.</param>
            <returns>The string with the first character converted to lower-case.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToLowerFirstCharacter(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the first character of the specified string to lower-case, using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="value">The string to operate on.</param>
            <param name="cultureInfo">Provides information about the specific culture.</param>
            <returns>The string with the first character converted to lower-case.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="cultureInfo"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.SByte)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The invariant culture string representation of the specified value.
            </returns>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Nullable{System.SByte},System.Boolean)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
            <returns>
            The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Byte)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The invariant culture string representation of the specified value.
            </returns>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Nullable{System.Byte},System.Boolean)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
            <returns>
            The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Int16)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The invariant culture string representation of the specified value.
            </returns>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Nullable{System.Int16},System.Boolean)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
            <returns>
            The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.UInt16)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The invariant culture string representation of the specified value.
            </returns>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Nullable{System.UInt16},System.Boolean)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
            <returns>
            The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Int32)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The invariant culture string representation of the specified value.
            </returns>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
            <returns>
            The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.UInt32)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The invariant culture string representation of the specified value.
            </returns>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Nullable{System.UInt32},System.Boolean)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
            <returns>
            The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Int64)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The invariant culture string representation of the specified value.
            </returns>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Nullable{System.Int64},System.Boolean)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
            <returns>
            The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.UInt64)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The invariant culture string representation of the specified value.
            </returns>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Nullable{System.UInt64},System.Boolean)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
            <returns>
            The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Single)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The invariant culture string representation of the specified value.
            </returns>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Nullable{System.Single},System.Boolean)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
            <returns>
            The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Double)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The invariant culture string representation of the specified value.
            </returns>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Nullable{System.Double},System.Boolean)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
            <returns>
            The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Decimal)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The invariant culture string representation of the specified value.
            </returns>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Nullable{System.Decimal},System.Boolean)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
            <returns>
            The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Boolean)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The invariant culture string representation of the specified value.
            </returns>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
            <returns>
            The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Guid)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The invariant culture string representation of the specified value.
            </returns>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
            <returns>
            The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.DateTime)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The invariant culture string representation of the specified value.
            </returns>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToStringInvariantPreferred(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Gets the preferred string representation of a specified value using the invariant culture.
            </summary>
            <param name="value">The value.</param>
            <param name="throwIfNull">OPTIONAL value that determines whether to throw if <paramref name="value"/> is null.  DEFAULT is to throw.</param>
            <returns>
            The invariant culture string representation of the specified value or null if <paramref name="value"/> is null and <paramref name="throwIfNull"/> is false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null and <paramref name="throwIfNull"/> is true.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToUpperFirstCharacter(System.String)">
            <summary>
            Converts the first character of the specified string to upper-case, using <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="value">The string to operate on.</param>
            <returns>The string with the first character converted to upper-case.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToUpperFirstCharacter(System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts the first character of the specified string to upper-case, using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
            <param name="value">The string to operate on.</param>
            <param name="cultureInfo">Provides information about the specific culture.</param>
            <returns>The string with the first character converted to upper-case.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="cultureInfo"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToUnicodeBytes(System.String)">
            <summary>
            Encodes all characters in a given string to an array of bytes encoded in unicode.
            </summary>
            <param name="value">The string to encode.</param>
            <returns>byte array representing the string in unicode.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.String.Recipes.StringExtensions.ToUtf8Bytes(System.String)">
            <summary>
            Encodes all characters in a given string to an array of bytes encoded in UTF-8.
            </summary>
            <param name="value">The string to encode.</param>
            <returns>byte array representing the string in UTF-8.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is null.</exception>
        </member>
        <member name="T:OBeautifulCode.Type.Recipes.ArrayKind">
            <summary>
            Specifies the kind of array.
            </summary>
            <remarks>
            See <a href="https://stackoverflow.com/questions/60859850/how-to-determine-if-rank-1-array-is-a-vector-or-multidimensional-array?noredirect=1#comment107679655_60859850"/>.
            </remarks>
        </member>
        <member name="F:OBeautifulCode.Type.Recipes.ArrayKind.None">
            <summary>
            Not an array.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Type.Recipes.ArrayKind.Vector">
            <summary>
            A vector array.  Can only have a single dimension.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Type.Recipes.ArrayKind.Multidimensional">
            <summary>
            A multidimensional array.  Can have 1 to 32 dimensions.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Type.Recipes.ToStringReadableOptions">
            <summary>
            Options for generating a readability-optimized string representation of a type.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Type.Recipes.ToStringReadableOptions.None">
            <summary>
            None (default).
            Use this option to generate the most succinct representation of the specified type.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Type.Recipes.ToStringReadableOptions.IncludeNamespace">
            <summary>
            Include the namespace of the type.
            If the type is generic then also include the namespace of all generic argument types.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Type.Recipes.ToStringReadableOptions.IncludeAssemblyDetails">
            <summary>
            Include details (name and version) about the assembly that contains the type.
            If the type is generic then also include details about the assembly that contains
            all of the generic argument types.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Type.Recipes.ToStringXmlDocOptions">
            <summary>
            Options for generating a XML doc compatible string representation of a type.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Type.Recipes.ToStringXmlDocOptions.None">
            <summary>
            None (default).
            Use this option to generate the most succinct representation of the specified type.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Type.Recipes.ToStringXmlDocOptions.IncludeNamespace">
            <summary>
            Include the namespace of the type.
            If the type is generic then also include the namespace of all generic argument types.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Type.Recipes.TypeExtensions">
            <summary>
            Extension methods on type <see cref="T:System.Type"/>.
            </summary>
            <remarks>
            These resources helped:
            <a href="https://stackoverflow.com/questions/13012733/difference-between-type-isgenerictypedefinition-and-type-containsgenericparamete" />.
            <a href="https://stackoverflow.com/questions/2173107/what-exactly-is-an-open-generic-type-in-net" />.
            <a href="https://stackoverflow.com/questions/1735035/generics-open-and-closed-constructed-types" />.
            <a href="https://stackoverflow.com/questions/25811514/detect-if-a-generic-type-is-open" />.
            <a href="https://docs.microsoft.com/en-us/dotnet/api/system.type.isgenerictype" />.
            <a href="https://stackoverflow.com/questions/31772922/difference-between-isgenerictype-and-isgenerictypedefinition" />.
            <a href="https://stackoverflow.com/questions/59144791/if-type-isgenericparameter-true-will-type-containsgenericparameters-true?noredirect=1#comment104515860_59144791" />.
            <a href="https://stackoverflow.com/questions/59141721/why-is-the-basetype-of-a-generic-type-definition-not-itself-a-generic-type-defin?noredirect=1#comment104515814_59141721" />.
            </remarks>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.GetArrayKind(System.Type)">
            <summary>
            Determines the kind of array that the specified type is.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The kind of array of the specified type.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.GetClosedEnumerableElementType(System.Type)">
            <summary>
            Gets the type of the elements of a specified closed Enumerable type.
            </summary>
            <param name="type">The closed Enumerable type.</param>
            <returns>
            The type of the elements of the specified closed Enumerable type.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is not a closed Enumerable type.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.GetClosedDictionaryKeyType(System.Type)">
            <summary>
            Gets the type of the keys of a specified closed Dictionary type.
            </summary>
            <param name="type">The closed Dictionary type.</param>
            <returns>
            The type of the keys of the specified closed Dictionary type.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is not a closed Dictionary type.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.GetClosedDictionaryValueType(System.Type)">
            <summary>
            Gets the type of the values of a specified closed Dictionary type.
            </summary>
            <param name="type">The closed Dictionary type.</param>
            <returns>
            The type of the values of the specified closed Dictionary type.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is not a closed Dictionary type.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.GetClosedSystemCollectionElementType(System.Type)">
            <summary>
            Gets the type of the elements of the specified closed <see cref="N:System"/> Collection type.
            </summary>
            <param name="type">The closed <see cref="N:System"/> Collection type.</param>
            <returns>
            The type of the elements of the specified closed <see cref="N:System"/> Collection type.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is not a closed <see cref="N:System"/> Collection type.  See <see cref="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedSystemCollectionType(System.Type)"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.GetClosedSystemDictionaryKeyType(System.Type)">
            <summary>
            Gets the type of the keys of the specified closed <see cref="N:System"/> Dictionary type.
            </summary>
            <param name="type">The closed <see cref="N:System"/> Dictionary type.</param>
            <returns>
            The type of the keys of the specified closed <see cref="N:System"/> Dictionary type.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is not a closed <see cref="N:System"/> Dictionary type.  See <see cref="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedSystemDictionaryType(System.Type)"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.GetClosedSystemDictionaryValueType(System.Type)">
            <summary>
            Gets the type of the values of the specified closed <see cref="N:System"/> Dictionary type.
            </summary>
            <param name="type">The closed <see cref="N:System"/> Dictionary type.</param>
            <returns>
            The type of the values of the specified closed <see cref="N:System"/> Dictionary type.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is not a closed <see cref="N:System"/> Dictionary type.  See <see cref="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedSystemDictionaryType(System.Type)"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.GetGenericTypeDefinitionOrSpecifiedType(System.Type)">
            <summary>
            Gets the generic type definition of a specified type if the type is generic
            but not a generic type definition, otherwise returns the specified type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            If the specified type is a generic type but not a generic type definition then the
            generic type definition is returned, otherwise the specified type is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.GetInheritancePath(System.Type)">
            <summary>
            Gets the types in the inheritance path starting from the specified type's
            <see cref="P:System.Type.BaseType"/> and ending in a type with no <see cref="P:System.Type.BaseType"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>
            The <see cref="P:System.Type.BaseType"/> of <paramref name="type"/>, followed by that type's
            <see cref="P:System.Type.BaseType"/>, and so on until a type has no <see cref="P:System.Type.BaseType"/>
            (that property returns null).
            If <paramref name="type"/> has no <see cref="P:System.Type.BaseType"/>, then this method returns
            an empty list.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="type"/> is not assignable to <see cref="F:OBeautifulCode.Type.Recipes.TypeExtensions.EnumerableInterfaceType"/>.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.HasDefaultConstructor(System.Type)">
            <summary>
            Determines if the specified type has a default (public parameterless) constructor.
            </summary>
            <param name="type">Type to check.</param>
            <returns>
            A value indicating whether or not the type has a default (public parameterless) constructor.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.HasBaseType(System.Type)">
            <summary>
            Determines if the specified type has a base type.
            </summary>
            <returns>
            true if the specified type has a base type, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.HasObjectAsBaseType(System.Type)">
            <summary>
            Determines if the base type of the specified type is object.
            </summary>
            <returns>
            true if the base type of the specified type is object, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.HasWorkingDefaultComparer``1">
            <summary>
            Determines if <see cref="P:System.Collections.Generic.Comparer`1.Default"/> will return a
            working (non-throwing) comparer for the specified type.
            </summary>
            <remarks>
            See remarks in <see cref="M:OBeautifulCode.Type.Recipes.TypeExtensions.HasWorkingDefaultComparer(System.Type)"/>.
            </remarks>
            <typeparam name="T">The type.</typeparam>
            <returns>
            true if <see cref="P:System.Collections.Generic.Comparer`1.Default"/> returns a working (non-throwing)
            comparer for the specified type, otherwise false.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.HasWorkingDefaultComparer(System.Type)">
            <summary>
            Determines if <see cref="P:System.Collections.Generic.Comparer`1.Default"/> will return a
            working (non-throwing) comparer for the specified type.
            </summary>
            <remarks>
            <see cref="P:System.Collections.Generic.Comparer`1.Default" /> will always return some comparer for
            any given closed type.  However, that comparer, when used, will or will no
            throw based on the type itself.  If the type implements or inherits <see cref="T:System.IComparable`1"/>
            where T is itself, then the comparer will ultimately use that implementation.
            We say "ultimately" here and below because a wrapper object is used.
            If the type is nullable and the underlying type implements or inherits <see cref="T:System.IComparable`1"/>
            where T is the underlying type, then the comparer will ultimately use that implementation.
            Finally, if the the type, when boxed, implements or inherits <see cref="T:System.IComparable"/> then the comparer
            will ultimately use that implementation.  If not, then, upon using the comparer to compare two
            objects, an exception will be thrown.
            It's further important to note that this method is NOT simply checking whether the specified
            type is assignable to <see cref="T:System.IComparable`1"/>.  For example:
            typeof(IComparable&lt;string&gt;).HasWorkingDefaultComparer() == false
            That's because that type doesn't implement IComparable&lt;IComparable&lt;string&gt;&gt;
            per the heuristic described above.  That said, any type that is assignable to <see cref="T:System.IComparable"/>
            will return true per the heuristic above.  For example:
            typeof(IComparable).HasWorkingDefaultComparer() == true.
            </remarks>
            <param name="type">The type.</param>
            <returns>
            true if <see cref="P:System.Collections.Generic.Comparer`1.Default"/> returns a working (non-throwing)
            comparer for the specified type, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="type"/> is an open type.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsAssignableTo(System.Type,System.Type,System.Boolean)">
            <summary>
            Determines if a type if assignable to another type.
            </summary>
            <remarks>
            Adapted from: <a href="https://stackoverflow.com/questions/74616/how-to-detect-if-type-is-another-generic-type/1075059#1075059" />.
            </remarks>
            <param name="type">The current type.</param>
            <param name="otherType">The type to check for ability to assign to.</param>
            <param name="treatGenericTypeDefinitionAsAssignableTo">If <paramref name="otherType"/> is a generic type definition, specifies whether the method should treat that type as if a closed type can be assigned to it (e.g. IsAssignableTo(List&lt;int&gt;, List&lt;&gt;)).</param>
            <returns>
            true if <paramref name="type"/> can be assigned to <paramref name="otherType"/>; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="otherType"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="type"/> is an open type.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="otherType"/> is an open type, but not a generic type definition.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedTypeAssignableToNull(System.Type)">
            <summary>
            Determines if the specified type is closed and assignable to null.
            </summary>
            <remarks>
            Adapted from: <a href="https://stackoverflow.com/a/1770232/356790" />.
            </remarks>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is closed and assignable to null, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedAnonymousType(System.Type)">
            <summary>
            Determines if a type is a closed anonymous type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>A value indicating whether or not the type provided is a closed anonymous type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedAnonymousTypeFastCheck(System.Type)">
            <summary>
            Determines if a type is a closed anonymous type using a faster, but potentially
            less accurate heuristic than <see cref="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedAnonymousType(System.Type)"/>.
            </summary>
            <param name="type">Type to check.</param>
            <returns>A value indicating whether or not the type provided is a closed anonymous type.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedGenericType(System.Type)">
            <summary>
            Determines if the specified type is a closed generic type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is a closed generic type; otherwise false.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedNonAnonymousClassType(System.Type)">
            <summary>
            Determines if the specified type is a class type, that's not anonymous, and is closed.
            </summary>
            <remarks>
            This is basically asking, "Is this a class type that can be constructed/new-ed up?".
            </remarks>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is a class type, non-anonymous, and closed.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedNullableType(System.Type)">
            <summary>
            Determines if the specified type is a closed <see cref="T:System.Nullable`1"/> type.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is a closed <see cref="T:System.Nullable`1"/> type, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedSystemCollectionType(System.Type)">
            <summary>
            Determines if the specified type is a closed version of one of the
            following <see cref="N:System"/> Collection generic type definitions:
            <see cref="F:OBeautifulCode.Type.Recipes.TypeExtensions.SystemCollectionGenericTypeDefinitions"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is a closed <see cref="N:System"/> collection type; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedSystemDictionaryType(System.Type)">
            <summary>
            Determines if the specified type is a closed version one of one of the
            following <see cref="N:System"/> Dictionary generic type definitions:
            <see cref="F:OBeautifulCode.Type.Recipes.TypeExtensions.SystemDictionaryGenericTypeDefinitions"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is a closed <see cref="N:System"/> dictionary type; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedSystemEnumerableType(System.Type)">
            <summary>
            Determines if the specified type is a closed <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is a closed <see cref="T:System.Collections.Generic.IEnumerable`1"/>; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedSystemKeyValuePairType(System.Type)">
            <summary>
            Determines if the specified type is a closed <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is a closed <see cref="T:System.Collections.Generic.KeyValuePair`2"/>; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedSystemOrderedCollectionType(System.Type)">
            <summary>
            Determines if the specified type is a closed version of one of the
            following ordered <see cref="N:System"/> Collection generic type definitions:
            <see cref="F:OBeautifulCode.Type.Recipes.TypeExtensions.SystemOrderedCollectionGenericTypeDefinitions"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is a closed, ordered <see cref="N:System"/> Collection type; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedSystemUnorderedCollectionType(System.Type)">
            <summary>
            Determines if the specified type is a closed version of one of the
            following unordered <see cref="N:System"/> Collection generic type definitions:
            <see cref="F:OBeautifulCode.Type.Recipes.TypeExtensions.SystemUnorderedCollectionGenericTypeDefinitions"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is a closed, unordered <see cref="N:System"/> Collection type; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            Determines if the specified type is an open or closed <see cref="T:System.Nullable`1"/> type.
            </summary>
            <remarks>Adapted from: <a href="https://stackoverflow.com/a/41281601/356790" />.</remarks>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is an open or closed <see cref="T:System.Nullable`1"/> type, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsSystemType(System.Type)">
            <summary>
            Determines if the specified type is in the <see cref="N:System"/> namespace.
            </summary>
            <remarks>
            An array is considered a system type.
            A ValueTuple is considered a system type.
            A generic type parameter is considered a system type.
            An anonymous type is not considered a system type.
            </remarks>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is in the <see cref="N:System"/> namespace, otherwise false.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsSystemCollectionType(System.Type)">
            <summary>
            Determines if the specified type is an open or closed version of one of the
            following <see cref="N:System"/> Collection generic type definitions:
            <see cref="F:OBeautifulCode.Type.Recipes.TypeExtensions.SystemCollectionGenericTypeDefinitions"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is an open or closed <see cref="N:System"/> collection type; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsSystemDictionaryType(System.Type)">
            <summary>
            Determines if the specified type is an open or closed version one of one of the
            following <see cref="N:System"/> Dictionary generic type definitions:
            <see cref="F:OBeautifulCode.Type.Recipes.TypeExtensions.SystemDictionaryGenericTypeDefinitions"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is an open or closed <see cref="N:System"/> dictionary type; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsSystemEnumerableType(System.Type)">
            <summary>
            Determines if the specified type is an open or closed <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is an open or closed <see cref="T:System.Collections.Generic.IEnumerable`1"/>; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsSystemKeyValuePairType(System.Type)">
            <summary>
            Determines if the specified type is an open or closed <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is an open or closed <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsSystemOrderedCollectionType(System.Type)">
            <summary>
            Determines if the specified type is an open or closed version of one of the
            following ordered <see cref="N:System"/> Collection generic type definitions:
            <see cref="F:OBeautifulCode.Type.Recipes.TypeExtensions.SystemOrderedCollectionGenericTypeDefinitions"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is an open or closed, ordered <see cref="N:System"/> Collection type; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsSystemUnorderedCollectionType(System.Type)">
            <summary>
            Determines if the specified type is an open or closed version of one of the
            following unordered <see cref="N:System"/> Collection generic type definitions:
            <see cref="F:OBeautifulCode.Type.Recipes.TypeExtensions.SystemUnorderedCollectionGenericTypeDefinitions"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is an open or closed, unordered <see cref="N:System"/> Collection type; otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsTypeAssignableToNull(System.Type)">
            <summary>
            Determines if the specified type is assignable to null.
            </summary>
            <remarks>
            Adapted from: <a href="https://stackoverflow.com/a/1770232/356790" />.
            </remarks>
            <param name="type">The type.</param>
            <returns>
            true if the specified type is assignable to null, otherwise false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.MakeGenericTypeOrNull(System.Type,System.Type[])">
            <summary>
            Substitutes the elements of an array of types for the type parameters of the current
            generic type definition and returns a <see cref="T:System.Type"/> object representing the resulting constructed type
            or null if the operation cannot be performed.
            </summary>
            <param name="type">The generic type definition.</param>
            <param name="typeArguments">An array of types to be substituted for the type parameters of <paramref name="type"/>.</param>
            <returns>
            A <see cref="T:System.Type"/> representing the constructed type formed by substituting the
            elements of <paramref name="typeArguments"/> for the type parameters of <paramref name="type"/> or null
            if the operation cannot be performed.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.ToStringCompilable(System.Type,System.Boolean)">
            <summary>
            Gets a compilable, readability-optimized string representation of the specified type.
            </summary>
            <remarks>
            Adapted from: <a href="https://stackoverflow.com/a/6402967/356790" />.
            Adapted from: <a href="https://stackoverflow.com/questions/1362884/is-there-a-way-to-get-a-types-alias-through-reflection" />.
            </remarks>
            <param name="type">The type.</param>
            <param name="throwIfNoCompilableStringExists">Optional value indicating whether to throw a <see cref="T:System.NotSupportedException"/> if there's no compilable representation of the specified type.</param>
            <returns>
            A compilable, readability-optimized string representation of the specified type
            OR
            null if there is no compilable representation and <paramref name="throwIfNoCompilableStringExists"/> is true.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="throwIfNoCompilableStringExists"/> is true and <paramref name="type"/> is a generic open constructed type, which is not supported.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="throwIfNoCompilableStringExists"/> is true and <paramref name="type"/> is a generic parameter.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.ToStringReadable(System.Type,OBeautifulCode.Type.Recipes.ToStringReadableOptions)">
            <summary>
            Gets a readability-optimized string representation of the specified type.
            </summary>
            <remarks>
            Adapted from: <a href="https://stackoverflow.com/a/6402967/356790" />.
            Adapted from: <a href="https://stackoverflow.com/questions/1362884/is-there-a-way-to-get-a-types-alias-through-reflection" />.
            Helpful breakdown of generics: <a href="https://docs.microsoft.com/en-us/dotnet/api/system.type.isgenerictype" />.
            </remarks>
            <param name="type">The type.</param>
            <param name="options">The options to use when generating the string representation.</param>
            <returns>
            A readability-optimized string representation of the specified type.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.ToStringXmlDoc(System.Type,System.Boolean,OBeautifulCode.Type.Recipes.ToStringXmlDocOptions)">
            <summary>
            Gets an XML-doc compatible string representation of the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="throwIfNoCompatibleStringExists">Optional value indicating whether to throw a <see cref="T:System.NotSupportedException"/> if there's no compatible string representation of the specified type.</param>
            <param name="options">The options to use when generating the string representation.</param>
            <returns>
            A XML-doc compatible string representation of the specified type.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.ToStringWithoutGenericComponent(System.Type)">
            <summary>
            Gets a string representation of the specified type without the generic component.
            For example, Dictionary&lt;string, string&gt; would be represented as 'Dictionary'.
            </summary>
            <remarks>
            Adapted from: <a href="https://stackoverflow.com/a/6386234/356790" />.
            </remarks>
            <param name="type">The type.</param>
            <returns>
            A string representation of the specified type with the generic component stripped out.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Type.Recipes.TypeExtensions.TryMakeGenericType(System.Type,System.Type@,System.Type[])">
            <summary>
            Substitutes the elements of an array of types for the type parameters of the current
            generic type definition and returns a <see cref="T:System.Type"/> object representing the resulting constructed type.
            </summary>
            <param name="type">The generic type definition.</param>
            <param name="genericType">A <see cref="T:System.Type"/> representing the constructed type formed by substituting the elements of <paramref name="typeArguments"/> for the type parameters of <paramref name="type"/> or null if the operation cannot be performed.</param>
            <param name="typeArguments">An array of types to be substituted for the type parameters of <paramref name="type"/>.</param>
            <returns>
            true if the type was successfully constructed; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="type"/> is null.</exception>
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.CamelStrictConstructorContractResolver">
             <summary>
             Resolves member mappings for a type using camel casing property names.
             Also requires that constructor parameters are defined in the json string
             when deserializing, for types with non-default constructors.
             </summary>
             <remarks>
             See. <a href="https://stackoverflow.com/questions/37416233/json-net-should-not-use-default-values-for-constructor-parameters-should-use-de"/>
            
             As of 7.0.1, Json.NET suggests using a static instance for "stateless" contract resolvers, for performance reasons.
             We CANNOT do that because we need to pass in the registered types.
             <a href="http://www.newtonsoft.com/json/help/html/ContractResolver.htm"/>
             <a href="http://www.newtonsoft.com/json/help/html/M_Newtonsoft_Json_Serialization_DefaultContractResolver__ctor_1.htm"/>
             "Use the parameter-less constructor and cache instances of the contract resolver within your application for optimal performance."
             Also. <a href="https://stackoverflow.com/questions/33557737/does-json-net-cache-types-serialization-information"/>
             </remarks>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.CamelStrictConstructorContractResolver.#ctor(System.Func{System.Collections.Generic.IReadOnlyDictionary{System.Type,OBeautifulCode.Serialization.RegistrationDetails}})">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.CamelStrictConstructorContractResolver"/> class.
            </summary>
            <param name="getRegisteredTypesFunc">
            A func that gets the registered types mapped to the registration details.
            Note that this is a func so that we can always get the latest registered types.
            That set can get mutated with post-initialization registrations.
            </param>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.CamelStrictConstructorContractResolver.CreateObjectContract(System.Type)">
             <inheritdoc />
             <remarks>
             We are overriding this method to provide better support for objects with non-default constructors.
            
             Out-of-the-box, Newtonsoft throws when deserializing an object with multiple constructors.
             The solution is to add the [JsonConstructor] attribute on the constructor to use, but that
             pollutes the model and requires a reference to Newtonsoft in the project.
             The RIGHT way to do this is to do what BSON does - find the constructor with the maximum number
             of parameters having a corresponding property.  This a little cumbersome so we are using a less optimal
             but totally sufficient heuristic: we choose the constructor with the maximum number of parameters.
             However we could fix this up in the future.
            
             Another deficiency is support for models containing
             (a) initialized getter-only (e.g. public string MyProperty { get; } = "whatever") or
             (b) expression bodied getter-only (e.g. public string MyProperty => "whatever) properties.
            
             These properties are serialized and so, upon deserialization, Newtonsoft attempts to serialize
             them and throws if it can't, despite the fact that these properties cannot be set and thus
             should just be ignored.  WE HAVE NOT BEEN ABLE TO FIX-UP THIS DEFICIENCY.  We tried two approaches:
             1. In the call to result.CreatorParameters.AddRange(...) only add properties that correspond to constructor
                parameters.  This effectively does nothing because CreateConstructorParameters already filters-out unused
                properties.  Newtonsoft still attempts to deserialize these properties before calling the constructor and throws.
             2. Remove the getter-only properties from result.Properties.  In this case Newtonsoft does not throw, however
                only models with expression-bodied properties would roundtrip.  Models with initialized getter-only properties
                didn't call the initializer and thus those properties were set to null.  Also, in all cases the property
                was NOT written to the payload upon serialization, which was a non-starter for us.  We expect all properties
                to be written to the JSON payload, regardless of whether they are required for deserialization.
             </remarks>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.CamelStrictConstructorContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,NewtonsoftFork.Json.Serialization.JsonPropertyCollection)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.CamelStrictConstructorContractResolver.CreatePropertyFromConstructorParameter(NewtonsoftFork.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.StringSerializerBackedJsonConverter">
            <summary>
            A converter that is backed by a specified <see cref="T:OBeautifulCode.Serialization.ISerializeAndDeserialize"/>.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.StringSerializerBackedJsonConverter.#ctor(System.Type,OBeautifulCode.Serialization.IStringSerializeAndDeserialize,OBeautifulCode.Serialization.Json.CanConvertTypeMatchStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.StringSerializerBackedJsonConverter"/> class.
            </summary>
            <param name="registeredType">The type that the converter is registered for.</param>
            <param name="backingSerializer">The backing serializer.</param>
            <param name="canConvertTypeMatchStrategy">OPTIONAL strategy to use to match the incoming type-to-consider with <paramref name="registeredType"/>.  DEFAULT is match when the types are equal.</param>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.StringSerializerBackedJsonConverter.RegisteredType">
            <summary>
            Gets the type that the converter is registered for.
            </summary>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.StringSerializerBackedJsonConverter.BackingSerializer">
            <summary>
            Gets the underlying serializer.
            </summary>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.StringSerializerBackedJsonConverter.CanConvertTypeMatchStrategy">
            <summary>
            Gets the strategy to use to match the incoming type-to-consider with <see cref="P:OBeautifulCode.Serialization.Json.StringSerializerBackedJsonConverter.RegisteredType"/>.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.StringSerializerBackedJsonConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.StringSerializerBackedJsonConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.StringSerializerBackedJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.CanConvertTypeMatchStrategy">
            <summary>
            The strategy to use in <see cref="M:NewtonsoftFork.Json.JsonConverter.CanConvert(System.Type)"/> to match
            an incoming type-to-consider with the type that the <see cref="T:NewtonsoftFork.Json.JsonConverter"/> is registered for.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Serialization.Json.CanConvertTypeMatchStrategy.TypeToConsiderEqualsRegisteredType">
            <summary>
            The incoming type-to-consider must be equal to the registered type.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Serialization.Json.CanConvertTypeMatchStrategy.TypeToConsiderIsAssignableToRegisteredType">
            <summary>
            The incoming type-to-consider must be assignable to the registered type.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Serialization.Json.CanConvertTypeMatchStrategy.TypeToConsiderIsAssignableFromRegisteredType">
            <summary>
            The incoming type-to-consider must be assignable from the registered type.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Serialization.Json.CanConvertTypeMatchStrategy.TypeToConsiderIsAssignableToOrFromRegisteredType">
            <summary>
            The incoming type-to-consider must be assignable to OR from the registered type.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.StringSerializerBackedJsonConverter`1">
            <summary>
            A converter that is backed by a specified <see cref="T:OBeautifulCode.Serialization.ISerializeAndDeserialize"/>.
            </summary>
            <typeparam name="T">The type that this converter is registered for.</typeparam>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.StringSerializerBackedJsonConverter`1.#ctor(OBeautifulCode.Serialization.IStringSerializeAndDeserialize,OBeautifulCode.Serialization.Json.CanConvertTypeMatchStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.StringSerializerBackedJsonConverter`1"/> class.
            </summary>
            <param name="backingSerializer">The backing serializer.</param>
            <param name="canConvertTypeMatchStrategy">OPTIONAL strategy to use to match the incoming type-to-consider with <typeparamref name="T"/>.  DEFAULT is match when the types are equal.</param>
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.ProjectInfo">
            <summary>
            Project-related information.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Serialization.Json.ProjectInfo.Namespace">
            <summary>
            The namespace used by types in this project.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Serialization.Json.ProjectInfo.Assembly">
            <summary>
            The assembly produced by this project.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.ConciseFormatJsonSerializationConfiguration`1">
            <summary>
            A JSON serialization configuration that sets <see cref="P:OBeautifulCode.Serialization.Json.ConciseFormatJsonSerializationConfiguration`1.DependentJsonSerializationConfigurationTypes"/> to typeof(T),
            sets <see cref="P:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.JsonFormattingKind"/> to <see cref="F:OBeautifulCode.Serialization.Json.JsonFormattingKind.Concise"/>,
            and sets the remaining public/overrideable properties to the corresponding properties on the dependent serialization configuration.
            </summary>
            <typeparam name="T">The dependent JSON serialization configuration type.</typeparam>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.ConciseFormatJsonSerializationConfiguration`1.UnregisteredTypeEncounteredStrategy">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.ConciseFormatJsonSerializationConfiguration`1.JsonFormattingKind">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.ConciseFormatJsonSerializationConfiguration`1.OverrideContractResolver">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.ConciseFormatJsonSerializationConfiguration`1.DependentJsonSerializationConfigurationTypes">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.DefaultFormatJsonSerializationConfiguration`1">
            <summary>
            A JSON serialization configuration that sets <see cref="P:OBeautifulCode.Serialization.Json.DefaultFormatJsonSerializationConfiguration`1.DependentJsonSerializationConfigurationTypes"/> to typeof(T),
            sets <see cref="P:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.JsonFormattingKind"/> to <see cref="F:OBeautifulCode.Serialization.Json.JsonFormattingKind.Default"/>,
            and sets the remaining public/overrideable properties to the corresponding properties on the dependent serialization configuration.
            </summary>
            <typeparam name="T">The dependent JSON serialization configuration type.</typeparam>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.DefaultFormatJsonSerializationConfiguration`1.UnregisteredTypeEncounteredStrategy">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.DefaultFormatJsonSerializationConfiguration`1.JsonFormattingKind">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.DefaultFormatJsonSerializationConfiguration`1.OverrideContractResolver">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.DefaultFormatJsonSerializationConfiguration`1.DependentJsonSerializationConfigurationTypes">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.MinimalFormatJsonSerializationConfiguration`1">
            <summary>
            A JSON serialization configuration that sets <see cref="P:OBeautifulCode.Serialization.Json.MinimalFormatJsonSerializationConfiguration`1.DependentJsonSerializationConfigurationTypes"/> to typeof(T),
            sets <see cref="P:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.JsonFormattingKind"/> to <see cref="F:OBeautifulCode.Serialization.Json.JsonFormattingKind.Minimal"/>,
            and sets the remaining public/overrideable properties to the corresponding properties on the dependent serialization configuration.
            </summary>
            <typeparam name="T">The dependent JSON serialization configuration type.</typeparam>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.MinimalFormatJsonSerializationConfiguration`1.UnregisteredTypeEncounteredStrategy">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.MinimalFormatJsonSerializationConfiguration`1.JsonFormattingKind">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.MinimalFormatJsonSerializationConfiguration`1.OverrideContractResolver">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.MinimalFormatJsonSerializationConfiguration`1.DependentJsonSerializationConfigurationTypes">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.CompactFormatJsonSerializationConfiguration`1">
            <summary>
            A JSON serialization configuration that sets <see cref="P:OBeautifulCode.Serialization.Json.CompactFormatJsonSerializationConfiguration`1.DependentJsonSerializationConfigurationTypes"/> to typeof(T),
            sets <see cref="P:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.JsonFormattingKind"/> to <see cref="F:OBeautifulCode.Serialization.Json.JsonFormattingKind.Compact"/>,
            and sets the remaining public/overrideable properties to the corresponding properties on the dependent serialization configuration.
            </summary>
            <typeparam name="T">The dependent JSON serialization configuration type.</typeparam>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.CompactFormatJsonSerializationConfiguration`1.UnregisteredTypeEncounteredStrategy">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.CompactFormatJsonSerializationConfiguration`1.JsonFormattingKind">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.CompactFormatJsonSerializationConfiguration`1.OverrideContractResolver">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.CompactFormatJsonSerializationConfiguration`1.DependentJsonSerializationConfigurationTypes">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.TypesToRegisterJsonSerializationConfiguration">
            <summary>
            Help methods for creating JSON serialization configuration types that set <see cref="P:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.TypesToRegisterForJson"/>.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.TypesToRegisterJsonSerializationConfiguration.GetType(System.Type)">
            <summary>
            Gets the type of a JSON serialization configuration that registers the specified <paramref name="typeToRegister"/>,
            using the default settings for <see cref="T:OBeautifulCode.Serialization.MemberTypesToInclude"/> and <see cref="T:OBeautifulCode.Serialization.RelatedTypesToInclude"/>.
            </summary>
            <param name="typeToRegister">The type to register.</param>
            <returns>
            The requested JSON serialization configuration type.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.TypesToRegisterJsonSerializationConfiguration.GetType(System.Type,System.Type)">
            <summary>
            Gets the type of a JSON serialization configuration that registers the specified <paramref name="typeToRegister1"/> and <paramref name="typeToRegister2"/>,
            using the default settings for <see cref="T:OBeautifulCode.Serialization.MemberTypesToInclude"/> and <see cref="T:OBeautifulCode.Serialization.RelatedTypesToInclude"/>.
            </summary>
            <param name="typeToRegister1">The first type to register.</param>
            <param name="typeToRegister2">The second type to register.</param>
            <returns>
            The requested JSON serialization configuration type.
            </returns>
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.ThrowOnUnregisteredTypeJsonSerializationConfiguration`1">
            <summary>
            A JSON serialization configuration that sets <see cref="P:OBeautifulCode.Serialization.Json.ThrowOnUnregisteredTypeJsonSerializationConfiguration`1.DependentJsonSerializationConfigurationTypes"/> to typeof(T),
            sets <see cref="P:OBeautifulCode.Serialization.SerializationConfigurationBase.UnregisteredTypeEncounteredStrategy"/> to <see cref="F:OBeautifulCode.Serialization.UnregisteredTypeEncounteredStrategy.Throw"/>,
            and sets the remaining public/overrideable properties to the corresponding properties on the dependent serialization configuration.
            </summary>
            <typeparam name="T">The dependent JSON serialization configuration type.</typeparam>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.ThrowOnUnregisteredTypeJsonSerializationConfiguration`1.UnregisteredTypeEncounteredStrategy">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.ThrowOnUnregisteredTypeJsonSerializationConfiguration`1.JsonFormattingKind">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.ThrowOnUnregisteredTypeJsonSerializationConfiguration`1.OverrideContractResolver">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.ThrowOnUnregisteredTypeJsonSerializationConfiguration`1.DependentJsonSerializationConfigurationTypes">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.AttemptOnUnregisteredTypeJsonSerializationConfiguration`1">
            <summary>
            A JSON serialization configuration that sets <see cref="P:OBeautifulCode.Serialization.Json.AttemptOnUnregisteredTypeJsonSerializationConfiguration`1.DependentJsonSerializationConfigurationTypes"/> to typeof(T),
            sets <see cref="P:OBeautifulCode.Serialization.SerializationConfigurationBase.UnregisteredTypeEncounteredStrategy"/> to <see cref="F:OBeautifulCode.Serialization.UnregisteredTypeEncounteredStrategy.Attempt"/>,
            and sets the remaining public/overrideable properties to the corresponding properties on the dependent serialization configuration.
            </summary>
            <typeparam name="T">The dependent JSON serialization configuration type.</typeparam>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.AttemptOnUnregisteredTypeJsonSerializationConfiguration`1.UnregisteredTypeEncounteredStrategy">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.AttemptOnUnregisteredTypeJsonSerializationConfiguration`1.JsonFormattingKind">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.AttemptOnUnregisteredTypeJsonSerializationConfiguration`1.OverrideContractResolver">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.AttemptOnUnregisteredTypeJsonSerializationConfiguration`1.DependentJsonSerializationConfigurationTypes">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.ContractResolverBuilder">
            <summary>
            Builds a contract resolver.
            </summary>
            <param name="getRegisteredTypesToRegistrationDetailsMapFunc">
            A func that gets the registered types mapped to the registration details.
            Note that this is a func so that we can always get the latest registered types.
            That set can get mutated with post-initialization registrations.
            </param>
            <returns>
            The contract resolver.
            </returns>
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.JsonSerializerSettingsBuilder">
            <summary>
            Builds a JSON serializer settings.
            </summary>
            <param name="getRegisteredTypesToRegistrationDetailsMapFunc">
            A func that gets the registered types mapped to the registration details.
            Note that this is a func so that we can always get the latest registered types.
            That set can get mutated with post-initialization registrations.
            </param>
            <returns>
            The JSON serializer settings.
            </returns>
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.StringKeysAsPropertiesDictionaryJsonConverter">
            <summary>
            Serializes a dictionary to an object whose properties are the Key/Value pairs.
            The property names are the Keys serialized as strings.  The property values are
            the serialized Values.
            This converter is used when the keys serialize as strings.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.StringKeysAsPropertiesDictionaryJsonConverter.#ctor(System.Collections.Generic.IReadOnlyDictionary{System.Type,OBeautifulCode.Serialization.IStringSerializeAndDeserialize})">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.StringKeysAsPropertiesDictionaryJsonConverter"/> class.
            </summary>
            <param name="typeToKeyInDictionaryStringSerializerMap">A map of type to serializer to use when dictionaries are keyed on that type and should be written-to/read-from a string.</param>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.StringKeysAsPropertiesDictionaryJsonConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.StringKeysAsPropertiesDictionaryJsonConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.StringKeysAsPropertiesDictionaryJsonConverter.ShouldHandleKeyType(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.DictionaryJsonConverterBase">
            <summary>
            Custom dictionary converter to do the right thing for System Dictionary types.
            See: <see cref="M:OBeautifulCode.Type.Recipes.TypeExtensions.IsClosedSystemDictionaryType(System.Type)"/> for supported types.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.DictionaryJsonConverterBase.#ctor(System.Collections.Generic.IReadOnlyCollection{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.DictionaryJsonConverterBase"/> class.
            </summary>
            <param name="typesThatSerializeToString">The types that are serialized as strings.</param>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.DictionaryJsonConverterBase.TypesThatSerializeToString">
            <summary>
            Gets the types that are serialized as strings.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.DictionaryJsonConverterBase.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.DictionaryJsonConverterBase.ConvertResultAsNecessary(System.Type,System.Object,System.Type[])">
            <summary>
            Convert the wrapped dictionary into the correct return type.
            </summary>
            <param name="returnType">Type to convert to.</param>
            <param name="wrappedDictionary">Wrapped dictionary to convert.</param>
            <param name="genericArguments">Generic arguments.</param>
            <returns>
            Converted dictionary to proper return object if necessary.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.DictionaryJsonConverterBase.ShouldHandleKeyType(System.Type)">
            <summary>
            Determines if this converter should handle the specified type of dictionary key.
            </summary>
            <param name="keyType">The type of the dictionary key.</param>
            <returns>
            A value indicating whether or not this converter should handle the specified type of dictionary key.
            </returns>
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.InheritedTypeJsonConverterBase">
            <summary>
            A converter that handles inherited types.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Serialization.Json.InheritedTypeJsonConverterBase.ConcreteTypeTokenName">
            <summary>
            The concrete type token name constant.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.InheritedTypeJsonConverterBase.#ctor(System.Func{System.Collections.Concurrent.ConcurrentDictionary{System.Type,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.InheritedTypeJsonConverterBase"/> class.
            </summary>
            <param name="getTypesToHandleFunc">
            A func that returns the set types that, when encountered, should trigger usage of the converter.
            Note that this is a func so that we can always get the latest types to handle.  That set can get mutated
            with post-initialization registrations.
            </param>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.InheritedTypeJsonConverterBase.ShouldBeHandledByThisConverter(System.Type)">
            <summary>
            Determines if the specified type should be handled by this converter.
            </summary>
            <param name="objectType">The type.</param>
            <returns>
            true if the specified type should be handled by this converter; false otherwise.
            </returns>
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.InheritedTypeReaderJsonConverter">
            <summary>
            An <see cref="T:OBeautifulCode.Serialization.Json.InheritedTypeJsonConverterBase"/> that handles reads/deserialization.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.InheritedTypeReaderJsonConverter.#ctor(System.Func{System.Collections.Concurrent.ConcurrentDictionary{System.Type,System.Object}},OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase)">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.InheritedTypeReaderJsonConverter"/> class.
            </summary>
            <param name="getTypesToHandleFunc">A func that gets the types that, when encountered, should trigger usage of the converter.</param>
            <param name="jsonSerializationConfiguration">The serialization configuration in-use.</param>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.InheritedTypeReaderJsonConverter.CanRead">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.InheritedTypeReaderJsonConverter.CanWrite">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.InheritedTypeReaderJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.InheritedTypeReaderJsonConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <inheritdoc />
            <remarks>
            - This method does not consider > 1st level JSON properties to determine candidates.  In other words,
              it is not matching on the fields/properties of the child's fields/properties (e.g. the match is done
              on Dog.Owner, not Dog.Owner.OwnersAddress).  The issue is that that kind of matching would require
              complex logic.  For example, Strings have properties such as Length which would need to be ignored
              when reflecting.  Similarly, all fields/properties of value-types would need to be ignored.  There
              are likely other corner-cases.  To keep things simple, if the 1st level properties match the type's
              properties and fields, by name, we hand-off the problem to the serializer and let it throw if
              there is some incompatibility deep in the field/property hierarchy.
            - This method does not consider the type of objects contained within JSON arrays to determine
              candidates.  This is difficult because JSON arrays can contain a mix of types (just likes .net
              objects) and every element would have to be deserialized and matched against the child's IEnumerable
              type and undoubtedly complexity would arise from dealing with generics and the vast implementations
              of IEnumerable.  Like the bullet above, we simply hand-off the problem to the serializer.
            - If properties or fields are removed from a child type after it has been serialized, then the JSON
              will not deserialize properly because that child type will no longer be a candidate.  If, however,
              properties or fields are added to the child type, then the child type will continue to be a
              candidate for the serialized JSON.
            - If the user serializes private or internal fields/properties, then this method will not work because
              it only looks for public fields/properties.  We cannot bank on the JSON having been serialized by
              the same serializer passed to this method.  Even if we could, the serializer is so highly
              configurable that it would be difficult to determine whether or which internal or private fields
              or properties are serialized.
            - It's OK if the JSON is serialized with NullValueHandling.Ignore because the candidate filter tries
              to find all JSON properties in child type's properties/fields, and not vice-versa.  However, depending
              on how permissive the serializer's Contract Resolver is, those candidates may or may not be able to
              be deserialized.  For example, if constructor parameters are required and a particular parameter is
              excluded from the JSON, then that type cannot be deserialized.
            </remarks>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.InheritedTypeReaderJsonConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.InheritedTypeWriterJsonConverter">
            <summary>
            An <see cref="T:OBeautifulCode.Serialization.Json.InheritedTypeJsonConverterBase"/> that handles writes/serialization.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.InheritedTypeWriterJsonConverter.#ctor(System.Func{System.Collections.Concurrent.ConcurrentDictionary{System.Type,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.InheritedTypeWriterJsonConverter"/> class.
            </summary>
            <param name="getTypesToHandleFunc">A func that gets the types that, when encountered, should trigger usage of the converter.</param>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.InheritedTypeWriterJsonConverter.CanRead">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.InheritedTypeWriterJsonConverter.CanWrite">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.InheritedTypeWriterJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.InheritedTypeWriterJsonConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.InheritedTypeWriterJsonConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.KeyValueArrayDictionaryJsonConverter">
            <summary>
            Serializes a dictionary to an array of key/value pairs.
            This converter is used when the keys do not serialize as strings.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.KeyValueArrayDictionaryJsonConverter.#ctor(System.Collections.Generic.IReadOnlyCollection{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.KeyValueArrayDictionaryJsonConverter"/> class.
            </summary>
            <param name="typesThatSerializeToString">Types that convert to a string when serialized.</param>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.KeyValueArrayDictionaryJsonConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.KeyValueArrayDictionaryJsonConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.KeyValueArrayDictionaryJsonConverter.ShouldHandleKeyType(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.ObcJsonSerializer`1">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.ObcJsonSerializer`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.ObcJsonSerializer`1"/> class.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase">
            <summary>
            Base class to use for creating <see cref="T:OBeautifulCode.Serialization.Json.ObcJsonSerializer" /> configuration.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.BuildJsonSerializerSettings(OBeautifulCode.Serialization.SerializationDirection,OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase)">
            <summary>
            Build <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings" /> to use for serialization using Newtonsoft.
            </summary>
            <param name="serializationDirection">Direction of serialization.</param>
            <param name="jsonSerializationConfiguration">The serialization configuration in use.</param>
            <returns>
            Prepared settings to use with Newtonsoft.
            </returns>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.TypesToRegister">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.DefaultDependentSerializationConfigurationTypes">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.DependentSerializationConfigurationTypes">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.TypesPermittedToHaveUnregisteredMembers">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.BuildSerializationConfigurationType">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.BuildTypeToRegisterForPostInitializationRegistration(System.Type,System.Type,System.Type,OBeautifulCode.Serialization.MemberTypesToInclude,OBeautifulCode.Serialization.RelatedTypesToInclude)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.ProcessRegistrationDetailsPriorToRegistration(OBeautifulCode.Serialization.RegistrationDetails,OBeautifulCode.Serialization.RegistrationTime)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.FinalizeInitialization">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.JsonFormattingKind">
            <summary>
            Gets the kind of formatting to use.
            </summary>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.OverrideContractResolver">
            <summary>
            Gets the optional override to the contract resolver of the settings gotten from the provided kind for reading.
            </summary>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.DependentJsonSerializationConfigurationTypes">
            <summary>
            Gets the <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase"/>s that are needed for the current implementation of <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase"/>.  Optionally overrideable, DEFAULT is empty collection.
            </summary>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase.TypesToRegisterForJson">
            <summary>
            Gets the types to register for JSON serialization.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationException">
            <summary>
            Exception for issues configuring JSON.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationException"/> class.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationException"/> class.
            </summary>
            <param name="message">Message for exception.</param>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationException"/> class.
            </summary>
            <param name="message">Message for exception.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationException"/> class.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Reading context.</param>
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.JsonFormattingKind">
            <summary>
            Kind of serialization to use.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Serialization.Json.JsonFormattingKind.Default">
            <summary>
            The default formatting which creates pretty-looking JSON and includes all the available information.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Serialization.Json.JsonFormattingKind.Compact">
            <summary>
            A compact format with no newlines.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Serialization.Json.JsonFormattingKind.Concise">
            <summary>
            A concise format with no newlines and no type discriminators written into the payload.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Serialization.Json.JsonFormattingKind.Minimal">
            <summary>
            A minimal format with no newlines, no type discriminators, and where null properties are omitted.
            </summary>
        </member>
        <member name="F:OBeautifulCode.Serialization.Json.JsonFormattingKind.Invalid">
            <summary>
            Invalid option.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.JsonSerializerFactory">
            <summary>
            Default implementation of <see cref="T:OBeautifulCode.Serialization.ISerializerFactory" />.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializerFactory.#ctor(OBeautifulCode.Compression.ICompressorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializerFactory"/> class.
            </summary>
            <param name="compressorFactory">Optional compressor factory to use.  DEFAULT is to use OBeautifulCode.Compression.Recipes.CompressorFactory.Instance.</param>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializerFactory.BuildSerializer(OBeautifulCode.Serialization.SerializerRepresentation,OBeautifulCode.Type.VersionMatchStrategy)">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.ObcJsonSerializer">
            <summary>
            JSON serializer.
            </summary>
            <remarks>
            Here is the source of NewtonsoftFork.Json 9.0.1: <a href="https://github.com/JamesNK/NewtonsoftFork.Json/tree/e5ac9a8473dfdefb8fe2cddae433a9aaa94a5b37"/>.
            </remarks>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.ObcJsonSerializer.#ctor(OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType)">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.ObcJsonSerializer"/> class.
            </summary>
            <param name="jsonSerializationConfigurationType">Optional type of configuration to use; DEFAULT is none.</param>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.ObcJsonSerializer.SerializationKind">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.ObcJsonSerializer.SerializerRepresentation">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.ObcJsonSerializer.ConvertJsonToByteArray(System.String)">
            <summary>
            Converts JSON string into a byte array.
            </summary>
            <param name="json">JSON string.</param>
            <returns>
            Byte array.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.ObcJsonSerializer.ConvertByteArrayToJson(System.Byte[])">
            <summary>
            Converts JSON byte array into a string.
            </summary>
            <param name="jsonAsBytes">JSON string as bytes.</param>
            <returns>
            JSON string.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.ObcJsonSerializer.SerializeToBytes(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.ObcJsonSerializer.Deserialize``1(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.ObcJsonSerializer.Deserialize(System.Byte[],System.Type)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.ObcJsonSerializer.SerializeToString(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.ObcJsonSerializer.Deserialize``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.ObcJsonSerializer.Deserialize(System.String,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.RegisteredContractResolver">
            <summary>
            Json converter to use.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.RegisteredContractResolver.#ctor(OBeautifulCode.Serialization.Json.ContractResolverBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.RegisteredContractResolver"/> class.
            </summary>
            <param name="contractResolverBuilder">A contract resolver builder.</param>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.RegisteredContractResolver.ContractResolverBuilder">
            <summary>
            Gets the builder function.
            </summary>
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.JsonConverterBuilder">
            <summary>
            Builds a serializing and deserializing <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonConverterBuilder.#ctor(System.String,System.Func{NewtonsoftFork.Json.JsonConverter},System.Func{NewtonsoftFork.Json.JsonConverter})">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.JsonConverterBuilder"/> class.
            </summary>
            <param name="id">The unique identifier for the builder.  This is used to de-dupe builders.  We want to avoid adding the same converters to the converter stack multiple times when multiple <see cref="T:OBeautifulCode.Serialization.Json.TypeToRegisterForJson"/> objects have the same builder, because it degrades performance.</param>
            <param name="serializingConverterBuilderFunc">A func that builds the serializing <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.</param>
            <param name="deserializingConverterBuilderFunc">A func that builds the deserializing <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.</param>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.JsonConverterBuilder.Id">
            <summary>
            Gets the unique identifier of the builder.
            </summary>
            <remarks>
            This is used to de-dupe builders.
            We want to avoid adding the same converters to the converter stack multiple times when multiple
            <see cref="T:OBeautifulCode.Serialization.Json.TypeToRegisterForJson"/> objects have the same builder, because it degrades performance.
            </remarks>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.JsonConverterBuilder.SerializingConverterBuilderFunc">
            <summary>
            Gets a func that builds the serializing <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.
            </summary>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.JsonConverterBuilder.DeserializingConverterBuilderFunc">
            <summary>
            Gets a func that builds the deserializing <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonConverterBuilder.GetJsonConverterBuilderFuncBySerializationDirection(OBeautifulCode.Serialization.SerializationDirection)">
            <summary>
            Gets the func that builds a <see cref="T:NewtonsoftFork.Json.JsonConverter"/> for the specified <see cref="T:OBeautifulCode.Serialization.SerializationDirection"/>.
            </summary>
            <param name="serializationDirection">The serialization direction.</param>
            <returns>
            The func that builds a <see cref="T:NewtonsoftFork.Json.JsonConvert"/> for the specified <see cref="T:OBeautifulCode.Serialization.SerializationDirection"/>.
            </returns>
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType">
            <summary>
            A wrapper for a concrete JSON serialization configuration type (derives from <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase"/>).
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType"/> class.
            </summary>
            <param name="concreteSerializationConfigurationDerivativeType">The type of the concrete <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase"/> derivative.</param>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType.op_Equality(OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType,OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType)">
            <summary>
            Determines whether two objects of type <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType"/> are equal.
            </summary>
            <param name="left">The object to the left of the equality operator.</param>
            <param name="right">The object to the right of the equality operator.</param>
            <returns>true if the two items are equal; otherwise false.</returns>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType.op_Inequality(OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType,OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType)">
            <summary>
            Determines whether two objects of type <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType"/> are not equal.
            </summary>
            <param name="left">The object to the left of the equality operator.</param>
            <param name="right">The object to the right of the equality operator.</param>
            <returns>true if the two items are not equal; otherwise false.</returns>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType.Equals(OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType.ToString">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationExtensions">
            <summary>
            Extension methods related to JSON serialization configuration.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationExtensions.ToJsonSerializationConfigurationType(System.Type)">
            <summary>
            Gets the <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType"/> corresponding to the specified configuration type.
            </summary>
            <param name="jsonSerializationConfigurationType">The type of the JSON serialization configuration.</param>
            <returns>
            The <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType"/> corresponding to the specified configuration type.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationExtensions.ToTypeToRegisterForJson(System.Type)">
            <summary>
            Builds a <see cref="T:OBeautifulCode.Serialization.Json.TypeToRegisterForJson"/> for a type using the most sensible settings.
            </summary>
            <param name="type">The type to register.</param>
            <returns>
            The type to register for JSON serialization.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationExtensions.ToTypeToRegisterForJsonUsingKeyInDictionaryStringSerializer(System.Type,OBeautifulCode.Serialization.IStringSerializeAndDeserialize)">
            <summary>
            Builds a <see cref="T:OBeautifulCode.Serialization.Json.TypeToRegisterForJson"/> for a type using the most sensible settings,
            with a specified <see cref="T:OBeautifulCode.Serialization.IStringSerializeAndDeserialize"/> to use when dictionaries are keyed on that type.
            </summary>
            <param name="type">The type to register.</param>
            <param name="stringSerializer">The string serializer to use when dictionaries are keyed on <paramref name="type"/>.</param>
            <returns>
            The type to register for JSON serialization.
            </returns>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationExtensions.ToTypeToRegisterForJsonUsingStringSerializer(System.Type,OBeautifulCode.Serialization.IStringSerializeAndDeserialize)">
            <summary>
            Builds a <see cref="T:OBeautifulCode.Serialization.Json.TypeToRegisterForJson"/> for a type using the most sensible settings,
            with a specified <see cref="T:OBeautifulCode.Serialization.IStringSerializeAndDeserialize"/> to use everywhere the type appears.
            </summary>
            <param name="type">The type to register.</param>
            <param name="stringSerializer">The string serializer to use for <paramref name="type"/>.</param>
            <returns>
            The type to register for JSON serialization.
            </returns>
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType`1">
            <inheritdoc cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType" />
            <typeparam name="T">The type of concrete <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase"/> derivative.</typeparam>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType`1"/> class.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType`1.op_Equality(OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType{`0},OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType{`0})">
            <summary>
            Determines whether two objects of type <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType`1"/> are equal.
            </summary>
            <param name="left">The object to the left of the equality operator.</param>
            <param name="right">The object to the right of the equality operator.</param>
            <returns>true if the two items are equal; otherwise false.</returns>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType`1.op_Inequality(OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType{`0},OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType{`0})">
            <summary>
            Determines whether two objects of type <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType`1"/> are not equal.
            </summary>
            <param name="left">The object to the left of the equality operator.</param>
            <param name="right">The object to the right of the equality operator.</param>
            <returns>true if the two items are not equal; otherwise false.</returns>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType`1.Equals(OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType{`0})">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationType`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.DependencyOnlyJsonSerializationConfiguration`2">
            <summary>
            A JSON serialization configuration that populates <see cref="P:OBeautifulCode.Serialization.Json.DependencyOnlyJsonSerializationConfiguration`2.DependentJsonSerializationConfigurationTypes"/> with typeof(T1) and typeof(T2).
            </summary>
            <typeparam name="T1">The first dependent JSON serialization configuration type.</typeparam>
            <typeparam name="T2">The second dependent JSON serialization configuration type.</typeparam>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.DependencyOnlyJsonSerializationConfiguration`2.DependentJsonSerializationConfigurationTypes">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.DependencyOnlyJsonSerializationConfiguration`1">
            <summary>
            A JSON serialization configuration that populates <see cref="P:OBeautifulCode.Serialization.Json.DependencyOnlyJsonSerializationConfiguration`1.DependentJsonSerializationConfigurationTypes"/> with typeof(T).
            </summary>
            <typeparam name="T">The dependent JSON serialization configuration type.</typeparam>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.DependencyOnlyJsonSerializationConfiguration`1.DependentJsonSerializationConfigurationTypes">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.InternallyRequiredTypesToRegisterJsonSerializationConfiguration">
            <summary>
            A default JSON serialization configuration that adds the internally required types to <see cref="P:OBeautifulCode.Serialization.Json.InternallyRequiredTypesToRegisterJsonSerializationConfiguration.TypesToRegisterForJson"/>, using default behavior for <see cref="T:OBeautifulCode.Serialization.MemberTypesToInclude"/> and <see cref="T:OBeautifulCode.Serialization.RelatedTypesToInclude"/>.
            </summary>
            <remarks>
            This is a default serialization configuration for <see cref="T:OBeautifulCode.Serialization.Json.JsonSerializationConfigurationBase"/>.
            </remarks>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.InternallyRequiredTypesToRegisterJsonSerializationConfiguration.DependentJsonSerializationConfigurationTypes">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.InternallyRequiredTypesToRegisterJsonSerializationConfiguration.TypeToRegisterNamespacePrefixFilters">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.InternallyRequiredTypesToRegisterJsonSerializationConfiguration.TypesToRegisterForJson">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.NullJsonSerializationConfiguration">
            <summary>
            A JSON serialization configuration that with no dependent serialization configurations.
            This configuration will result in no types registered.
            </summary>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.NullJsonSerializationConfiguration.UnregisteredTypeEncounteredStrategy">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.TypesToRegisterJsonSerializationConfiguration`2">
            <summary>
            A JSON serialization configuration that adds <typeparamref name="T1"/> and <typeparamref name="T2"/> to <see cref="P:OBeautifulCode.Serialization.Json.TypesToRegisterJsonSerializationConfiguration`2.TypesToRegisterForJson"/>, using default behavior for <see cref="T:OBeautifulCode.Serialization.MemberTypesToInclude"/> and <see cref="T:OBeautifulCode.Serialization.RelatedTypesToInclude"/>.
            </summary>
            <typeparam name="T1">The first type register.</typeparam>
            <typeparam name="T2">The second type to register.</typeparam>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.TypesToRegisterJsonSerializationConfiguration`2.TypesToRegisterForJson">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.TypesToRegisterJsonSerializationConfiguration`2.TypeToRegisterNamespacePrefixFilters">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.TypesToRegisterJsonSerializationConfiguration`1">
            <summary>
            A JSON serialization configuration that adds <typeparamref name="T"/> to <see cref="P:OBeautifulCode.Serialization.Json.TypesToRegisterJsonSerializationConfiguration`1.TypesToRegisterForJson"/>, using default behavior for <see cref="T:OBeautifulCode.Serialization.MemberTypesToInclude"/> and <see cref="T:OBeautifulCode.Serialization.RelatedTypesToInclude"/>.
            </summary>
            <typeparam name="T">The type to register.</typeparam>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.TypesToRegisterJsonSerializationConfiguration`1.TypesToRegisterForJson">
            <inheritdoc />
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.TypesToRegisterJsonSerializationConfiguration`1.TypeToRegisterNamespacePrefixFilters">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.TypeToRegisterForJson">
            <summary>
            Specifies a type to register for JSON serialization.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.TypeToRegisterForJson.#ctor(System.Type,OBeautifulCode.Serialization.MemberTypesToInclude,OBeautifulCode.Serialization.RelatedTypesToInclude,OBeautifulCode.Serialization.Json.JsonConverterBuilder,OBeautifulCode.Serialization.IStringSerializeAndDeserialize)">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.TypeToRegisterForJson"/> class with a type that is it's own origin.
            </summary>
            <param name="type">The type to register.</param>
            <param name="memberTypesToInclude">Specifies which member types of <paramref name="type"/> that should also be registered.</param>
            <param name="relatedTypesToInclude">Specifies which types related to <paramref name="type"/> that should also be registered.</param>
            <param name="jsonConverterBuilder">Builds a serializing and deserializing <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.</param>
            <param name="keyInDictionaryStringSerializer">The serializer to use when dictionaries are keyed on <paramref name="type"/> and the keys should be written-to/read-from a string.</param>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.TypeToRegisterForJson.#ctor(System.Type,System.Type,System.Type,OBeautifulCode.Serialization.MemberTypesToInclude,OBeautifulCode.Serialization.RelatedTypesToInclude,OBeautifulCode.Serialization.Json.JsonConverterBuilder,OBeautifulCode.Serialization.IStringSerializeAndDeserialize)">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.TypeToRegisterForJson"/> class, specifying the origin types.
            </summary>
            <param name="type">The type to register.</param>
            <param name="recursiveOriginType">The type whose recursive processing of <paramref name="memberTypesToInclude"/> and <paramref name="relatedTypesToInclude"/> resulted in the creation of this <see cref="T:OBeautifulCode.Serialization.Json.TypeToRegisterForJson"/>.</param>
            <param name="directOriginType">The type whose processing of <paramref name="memberTypesToInclude"/> and <paramref name="relatedTypesToInclude"/> directly resulted in the creation of this <see cref="T:OBeautifulCode.Serialization.Json.TypeToRegisterForJson"/>.</param>
            <param name="memberTypesToInclude">Specifies which member types of <paramref name="type"/> that should also be registered.</param>
            <param name="relatedTypesToInclude">Specifies which types related to <paramref name="type"/> that should also be registered.</param>
            <param name="jsonConverterBuilder">Builds a serializing and deserializing <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.</param>
            <param name="keyInDictionaryStringSerializer">The serializer to use when dictionaries are keyed on <paramref name="type"/> and the keys should be written-to/read-from a string.</param>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.TypeToRegisterForJson.JsonConverterBuilder">
            <summary>
            Gets an object that builds a serializing and deserializing <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.
            </summary>
        </member>
        <member name="P:OBeautifulCode.Serialization.Json.TypeToRegisterForJson.KeyInDictionaryStringSerializer">
            <summary>
            Gets the serializer to use when dictionaries are keyed on <see cref="T:System.Type"/> and the keys should be written-to/read-from a string.
            </summary>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.TypeToRegisterForJson.CreateSpawnedTypeToRegister(System.Type,OBeautifulCode.Serialization.TypeToIncludeOrigin)">
            <inheritdoc />
        </member>
        <member name="T:OBeautifulCode.Serialization.Json.TypeToRegisterForJson`1">
            <inheritdoc />
            <typeparam name="T">The type to register.</typeparam>
        </member>
        <member name="M:OBeautifulCode.Serialization.Json.TypeToRegisterForJson`1.#ctor(OBeautifulCode.Serialization.MemberTypesToInclude,OBeautifulCode.Serialization.RelatedTypesToInclude,OBeautifulCode.Serialization.Json.JsonConverterBuilder,OBeautifulCode.Serialization.IStringSerializeAndDeserialize)">
            <summary>
            Initializes a new instance of the <see cref="T:OBeautifulCode.Serialization.Json.TypeToRegisterForJson`1"/> class.
            </summary>
            <param name="memberTypesToInclude">Specifies which member types of <typeparamref name="T"/> that should also be registered.</param>
            <param name="relatedTypesToInclude">Specifies which types related to <typeparamref name="T"/> that should also be registered.</param>
            <param name="jsonConverterBuilder">Builds a serializing and deserializing <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.</param>
            <param name="keyInDictionaryStringSerializer">The serializer to use when dictionaries are keyed on <typeparamref name="T"/> and the keys should be written-to/read-from a string.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Bson.BsonObjectId">
            <summary>
            Represents a BSON Oid (object id).
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Bson.BsonObjectId.Value">
            <summary>
            Gets or sets the value of the Oid.
            </summary>
            <value>The value of the Oid.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Bson.BsonObjectId"/> class.
            </summary>
            <param name="value">The Oid value.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Bson.BsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
            <value>
            	<c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
            <value>
            	<c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonReader.Close">
            <summary>
            Changes the <see cref="T:NewtonsoftFork.Json.JsonReader.State"/> to Closed.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.Bson.BsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime"/> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime"/> values to BSON.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteEnd(NewtonsoftFork.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value that represents a BSON object id.
            </summary>
            <param name="value">The Object ID value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>
            Writes a BSON regex.
            </summary>
            <param name="pattern">The regex pattern.</param>
            <param name="options">The regex options.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.ConstructorHandling">
            <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.ConstructorHandling.Default">
            <summary>
            First attempt to use the public default constructor, then fall back to single parameterized constructor, then the non-public default constructor.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            Json.NET will use a non-public default constructor before falling back to a parameterized constructor.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.Converters.BinaryConverter">
            <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.BinaryConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:NewtonsoftFork.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.BinaryConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.BinaryConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Converters.BsonObjectIdConverter">
            <summary>
            Converts a <see cref="T:NewtonsoftFork.Json.Bson.BsonObjectId"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.BsonObjectIdConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:NewtonsoftFork.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.BsonObjectIdConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Converters.CustomCreationConverter`1">
            <summary>
            Create a custom object
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.CustomCreationConverter`1.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:NewtonsoftFork.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.CustomCreationConverter`1.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:NewtonsoftFork.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:NewtonsoftFork.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:NewtonsoftFork.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NewtonsoftFork.Json.Converters.DateTimeConverterBase">
            <summary>
            Provides a base class for converting a <see cref="T:System.DateTime"/> to and from JSON.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Converters.DiscriminatedUnionConverter">
            <summary>
            Converts a F# discriminated union type to and from JSON.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.DiscriminatedUnionConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:NewtonsoftFork.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.DiscriminatedUnionConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Converters.EntityKeyMemberConverter">
            <summary>
            Converts an Entity Framework EntityKey to and from JSON.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.EntityKeyMemberConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:NewtonsoftFork.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.EntityKeyMemberConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Converters.ExpandoObjectConverter">
            <summary>
            Converts an ExpandoObject to and from JSON.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.ExpandoObjectConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:NewtonsoftFork.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.ExpandoObjectConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:NewtonsoftFork.Json.Converters.ExpandoObjectConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:NewtonsoftFork.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:NewtonsoftFork.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NewtonsoftFork.Json.Converters.IsoDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
            <value>The date time styles used when converting a date to and from JSON.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
            <value>The date time format used when converting a date to and from JSON.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
            <value>The culture used when converting a date to and from JSON.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.IsoDateTimeConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:NewtonsoftFork.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.IsoDateTimeConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Converters.JavaScriptDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.JavaScriptDateTimeConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:NewtonsoftFork.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.JavaScriptDateTimeConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Converters.KeyValuePairConverter">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to and from JSON.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.KeyValuePairConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:NewtonsoftFork.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.KeyValuePairConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Converters.RegexConverter">
            <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.RegexConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:NewtonsoftFork.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.RegexConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Converters.StringEnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its name string value.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
            <value><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Converters.StringEnumConverter.AllowIntegerValues">
            <summary>
            Gets or sets a value indicating whether integer values are allowed.
            </summary>
            <value><c>true</c> if integers are allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.StringEnumConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Converters.StringEnumConverter"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.StringEnumConverter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Converters.StringEnumConverter"/> class.
            </summary>
            <param name="camelCaseText"><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.StringEnumConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:NewtonsoftFork.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.StringEnumConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Converters.VersionConverter">
            <summary>
            Converts a <see cref="T:System.Version"/> to and from a string (e.g. "1.2.3.4").
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.VersionConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:NewtonsoftFork.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.VersionConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NewtonsoftFork.Json.DateFormatHandling">
            <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.DateFormatHandling.IsoDateFormat">
            <summary>
            Dates are written in the ISO 8601 format, e.g. "2012-03-21T05:40Z".
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.DateFormatHandling.MicrosoftDateFormat">
            <summary>
            Dates are written in the Microsoft JSON format, e.g. "\/Date(1198908717056)\/".
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.DateParseHandling">
            <summary>
            Specifies how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.DateParseHandling.None">
            <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.DateParseHandling.DateTime">
            <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:NewtonsoftFork.Json.DateParseHandling.DateTime"/>.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.DateParseHandling.DateTimeOffset">
            <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:NewtonsoftFork.Json.DateParseHandling.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.DateTimeZoneHandling">
            <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.DateTimeZoneHandling.Local">
            <summary>
            Treat as local time. If the <see cref="T:System.DateTime"/> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.DateTimeZoneHandling.Utc">
            <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime"/> object represents a local time, it is converted to a UTC.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.DateTimeZoneHandling.Unspecified">
            <summary>
            Treat as a local time if a <see cref="T:System.DateTime"/> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime"/>, convert to a local time if a time zone is specified.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.DateTimeZoneHandling.RoundtripKind">
            <summary>
            Time zone information should be preserved when converting.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.DefaultValueHandling">
            <summary>
            Specifies default value handling options for the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\NewtonsoftFork.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
              <code lang="cs" source="..\Src\NewtonsoftFork.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:NewtonsoftFork.Json.DefaultValueHandling.Include">
            <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.DefaultValueHandling.Ignore">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable types; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute"/> on the property.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.DefaultValueHandling.Populate">
            <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.FloatFormatHandling">
            <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/> with <see cref="T:NewtonsoftFork.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.FloatFormatHandling.String">
            <summary>
            Write special floating point values as strings in JSON, e.g. "NaN", "Infinity", "-Infinity".
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.FloatFormatHandling.Symbol">
            <summary>
            Write special floating point values as symbols in JSON, e.g. NaN, Infinity, -Infinity.
            Note that this will produce non-valid JSON.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.FloatFormatHandling.DefaultValue">
            <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double"/> property, null for a <see cref="T:System.Nullable`1"/> property.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.FloatParseHandling">
            <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.FloatParseHandling.Double">
            <summary>
            Floating point numbers are parsed to <see cref="F:NewtonsoftFork.Json.FloatParseHandling.Double"/>.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.FloatParseHandling.Decimal">
            <summary>
            Floating point numbers are parsed to <see cref="F:NewtonsoftFork.Json.FloatParseHandling.Decimal"/>.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:NewtonsoftFork.Json.JsonTextWriter"/>.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:NewtonsoftFork.Json.JsonTextWriter.Indentation"/> and <see cref="P:NewtonsoftFork.Json.JsonTextWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.IArrayPool`1">
            <summary>
            Provides an interface for using pooled arrays.
            </summary>
            <typeparam name="T">The array type content.</typeparam>
        </member>
        <member name="M:NewtonsoftFork.Json.IArrayPool`1.Rent(System.Int32)">
            <summary>
            Rent a array from the pool. This array must be returned when it is no longer needed.
            </summary>
            <param name="minimumLength">The minimum required length of the array. The returned array may be longer.</param>
            <returns>The rented array from the pool. This array must be returned when it is no longer needed.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.IArrayPool`1.Return(`0[])">
            <summary>
            Return an array to the pool.
            </summary>
            <param name="array">The array that is being returned.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.IJsonLineInfo">
            <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.IJsonLineInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:NewtonsoftFork.Json.IJsonLineInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="P:NewtonsoftFork.Json.IJsonLineInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonArrayAttribute">
            <summary>
            Instructs the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonArrayAttribute.AllowNullItems">
            <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
            <value><c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonArrayAttribute"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonObjectAttribute"/> class with a flag indicating whether the array can contain null items
            </summary>
            <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonArrayAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonConstructorAttribute">
            <summary>
            Instructs the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> to use the specified constructor when deserializing that object.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonContainerAttribute">
            <summary>
            Instructs the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonContainerAttribute.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonContainerAttribute.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonContainerAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonContainerAttribute.ItemConverterType">
            <summary>
            Gets or sets the collection's items converter.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonContainerAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:NewtonsoftFork.Json.JsonConverter"/> described by ItemConverterType.
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the <see cref="T:NewtonsoftFork.Json.JsonConverter"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            [JsonContainer(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </example>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonContainerAttribute.NamingStrategyType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the <see cref="T:NewtonsoftFork.Json.Serialization.NamingStrategy"/>.
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:NewtonsoftFork.Json.Serialization.NamingStrategy"/>.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonContainerAttribute.NamingStrategyParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:NewtonsoftFork.Json.Serialization.NamingStrategy"/> described by NamingStrategyType.  
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the <see cref="T:NewtonsoftFork.Json.Serialization.NamingStrategy"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            [JsonContainer(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </example>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonContainerAttribute.IsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
            <value>
            	<c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonContainerAttribute.ItemIsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
            <value>
            	<c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonContainerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonContainerAttribute"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonContainerAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonConvert">
            <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
            <example>
              <code lang="cs" source="..\Src\NewtonsoftFork.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
            </example>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonConvert.DefaultSettings">
            <summary>
            Gets or sets a function that creates default <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            Default settings are automatically used by serialization methods on <see cref="T:NewtonsoftFork.Json.JsonConvert"/>,
            and <see cref="M:NewtonsoftFork.Json.Linq.JToken.ToObject``1"/> and <see cref="M:NewtonsoftFork.Json.Linq.JToken.FromObject(System.Object)"/> on <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            To serialize without using any default settings create a <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> with
            <see cref="M:NewtonsoftFork.Json.JsonSerializer.Create"/>.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonConvert.True">
            <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonConvert.False">
            <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonConvert.Null">
            <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonConvert.Undefined">
            <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonConvert.PositiveInfinity">
            <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonConvert.NegativeInfinity">
            <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonConvert.NaN">
            <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.DateTime,NewtonsoftFork.Json.DateFormatHandling,NewtonsoftFork.Json.DateTimeZoneHandling)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation using the <see cref="T:NewtonsoftFork.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.DateTimeOffset,NewtonsoftFork.Json.DateFormatHandling)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation using the <see cref="T:NewtonsoftFork.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary>
            Converts the <see cref="T:System.TimeSpan"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.String,System.Char,NewtonsoftFork.Json.StringEscapeHandling)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <param name="stringEscapeHandling">The string escape handling.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.SerializeObject(System.Object,NewtonsoftFork.Json.Formatting)">
            <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.SerializeObject(System.Object,NewtonsoftFork.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.SerializeObject(System.Object,NewtonsoftFork.Json.Formatting,NewtonsoftFork.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.SerializeObject(System.Object,NewtonsoftFork.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.SerializeObject(System.Object,System.Type,NewtonsoftFork.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:NewtonsoftFork.Json.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.SerializeObject(System.Object,NewtonsoftFork.Json.Formatting,NewtonsoftFork.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.SerializeObject(System.Object,System.Type,NewtonsoftFork.Json.Formatting,NewtonsoftFork.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:NewtonsoftFork.Json.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.SerializeObjectAsync(System.Object)">
            <summary>
            Asynchronously serializes the specified object to a JSON string.
            Serialization will happen on a new thread.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.SerializeObjectAsync(System.Object,NewtonsoftFork.Json.Formatting)">
            <summary>
            Asynchronously serializes the specified object to a JSON string using formatting.
            Serialization will happen on a new thread.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.SerializeObjectAsync(System.Object,NewtonsoftFork.Json.Formatting,NewtonsoftFork.Json.JsonSerializerSettings)">
            <summary>
            Asynchronously serializes the specified object to a JSON string using formatting and a collection of <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.
            Serialization will happen on a new thread.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.DeserializeObject(System.String,NewtonsoftFork.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,NewtonsoftFork.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <param name="settings">
            The <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.DeserializeObject``1(System.String,NewtonsoftFork.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.DeserializeObject``1(System.String,NewtonsoftFork.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.DeserializeObject(System.String,System.Type,NewtonsoftFork.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.DeserializeObject(System.String,System.Type,NewtonsoftFork.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.DeserializeObjectAsync``1(System.String)">
            <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.DeserializeObjectAsync``1(System.String,NewtonsoftFork.Json.JsonSerializerSettings)">
            <summary>
            Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            Deserialization will happen on a new thread.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.DeserializeObjectAsync(System.String)">
            <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.DeserializeObjectAsync(System.String,System.Type,NewtonsoftFork.Json.JsonSerializerSettings)">
            <summary>
            Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            Deserialization will happen on a new thread.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.PopulateObject(System.String,System.Object,NewtonsoftFork.Json.JsonSerializerSettings)">
            <summary>
            Populates the object with values from the JSON string using <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConvert.PopulateObjectAsync(System.String,System.Object,NewtonsoftFork.Json.JsonSerializerSettings)">
            <summary>
            Asynchronously populates the object with values from the JSON string using <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>
            A task that represents the asynchronous populate operation.
            </returns>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonConverter">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConverter.WriteJson(NewtonsoftFork.Json.JsonWriter,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:NewtonsoftFork.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConverter.ReadJson(NewtonsoftFork.Json.JsonReader,System.Type,System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:NewtonsoftFork.Json.JsonConverter"/> can read JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:NewtonsoftFork.Json.JsonConverter"/> can read JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:NewtonsoftFork.Json.JsonConverter"/> can write JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:NewtonsoftFork.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonConverterAttribute">
            <summary>
            Instructs the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> to use the specified <see cref="T:NewtonsoftFork.Json.JsonConverter"/> when serializing the member or class.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonConverterAttribute.ConverterType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonConverterAttribute.ConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:NewtonsoftFork.Json.JsonConverter"/> described by ConverterType.  
            If null, the default constructor is used.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.</param>
            <param name="converterParameters">Parameter list to use when constructing the <see cref="T:NewtonsoftFork.Json.JsonConverter"/>. Can be null.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonConverterCollection">
            <summary>
            Represents a collection of <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonDictionaryAttribute">
            <summary>
            Instructs the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonDictionaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonDictionaryAttribute"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonDictionaryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonDictionaryAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonException"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonExtensionDataAttribute">
            <summary>
            Instructs the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonExtensionDataAttribute.WriteData">
            <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
            <value>
            	<c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonExtensionDataAttribute.ReadData">
            <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
            <value>
            	<c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonExtensionDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonExtensionDataAttribute"/> class.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonObjectAttribute">
            <summary>
            Instructs the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonObjectAttribute.MemberSerialization">
            <summary>
            Gets or sets the member serialization.
            </summary>
            <value>The member serialization.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonObjectAttribute.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonObjectAttribute"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonObjectAttribute.#ctor(NewtonsoftFork.Json.MemberSerialization)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonObjectAttribute"/> class with the specified member serialization.
            </summary>
            <param name="memberSerialization">The member serialization.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonObjectAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonPropertyAttribute.ItemConverterType">
            <summary>
            Gets or sets the <see cref="T:NewtonsoftFork.Json.JsonConverter"/> used when serializing the property's collection items.
            </summary>
            <value>The collection's items <see cref="T:NewtonsoftFork.Json.JsonConverter"/>.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonPropertyAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:NewtonsoftFork.Json.JsonConverter"/> described by ItemConverterType.
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the <see cref="T:NewtonsoftFork.Json.JsonConverter"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            [JsonProperty(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </example>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonPropertyAttribute.NamingStrategyType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the <see cref="T:NewtonsoftFork.Json.Serialization.NamingStrategy"/>.
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:NewtonsoftFork.Json.Serialization.NamingStrategy"/>.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonPropertyAttribute.NamingStrategyParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:NewtonsoftFork.Json.Serialization.NamingStrategy"/> described by NamingStrategyType.  
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the <see cref="T:NewtonsoftFork.Json.Serialization.NamingStrategy"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            [JsonProperty(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </example>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonPropertyAttribute.IsReference">
            <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
            <value>Whether this property's value is serialized as a reference.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonPropertyAttribute.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonPropertyAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
            <value>
            	A value indicating whether this property is required.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonPropertyAttribute.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonPropertyAttribute"/> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonReader.State">
            <summary>
            Specifies the state of the reader.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonReader.State.Start">
            <summary>
            The Read method has not been called.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonReader.State.Complete">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonReader.State.Property">
            <summary>
            Reader is at a property.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonReader.State.ObjectStart">
            <summary>
            Reader is at the start of an object.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonReader.State.Object">
            <summary>
            Reader is in an object.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonReader.State.ArrayStart">
            <summary>
            Reader is at the start of an array.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonReader.State.Array">
            <summary>
            Reader is in an array.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonReader.State.Closed">
            <summary>
            The Close method has been called.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonReader.State.PostValue">
            <summary>
            Reader has just read a value.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonReader.State.ConstructorStart">
            <summary>
            Reader is at the start of a constructor.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonReader.State.Constructor">
            <summary>
            Reader in a constructor.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonReader.State.Error">
            <summary>
            An error occurred that prevents the read operation from continuing.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonReader.State.Finished">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReader.CurrentState">
            <summary>
            Gets the current reader state.
            </summary>
            <value>The current reader state.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReader.CloseInput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the reader is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the reader is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReader.SupportMultipleContent">
            <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
            <value>
            true to support reading multiple pieces of JSON content; otherwise false. The default is false.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReader.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling when reading JSON.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReader.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReader.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReader.DateFormatString">
            <summary>
            Get or set how custom date formatted strings are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReader.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:NewtonsoftFork.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current JSON token. 
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReader.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReader.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns><c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>A <see cref="T:System.Byte"/>[] or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.SetToken(NewtonsoftFork.Json.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.SetToken(NewtonsoftFork.Json.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReader.Close">
            <summary>
            Changes the <see cref="T:NewtonsoftFork.Json.JsonReader.State"/> to Closed. 
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonReaderException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonReaderException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonRequiredAttribute">
            <summary>
            Instructs the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> to always serialize the member, and require the member has a value.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonSerializationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> enables you to control how objects are encoded into JSON.
            </summary>
        </member>
        <member name="E:NewtonsoftFork.Json.JsonSerializer.Error">
            <summary>
            Occurs when the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> errors during serialization and deserialization.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:NewtonsoftFork.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:NewtonsoftFork.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
            <remarks>
            <see cref="P:NewtonsoftFork.Json.JsonSerializer.TypeNameHandling"/> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="T:System.Runtime.Serialization.SerializationBinder"/>
            when deserializing with a value other than <c>TypeNameHandling.None</c>.
            </remarks>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.MissingMemberHandling">
            <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.NullValueHandling">
            <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.DefaultValueHandling">
            <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.Converters">
            <summary>
            Gets a collection <see cref="T:NewtonsoftFork.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>Collection <see cref="T:NewtonsoftFork.Json.JsonConverter"/> that will be used during serialization.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling during serialization and deserialization.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text, and the expected date format when reading JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:NewtonsoftFork.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializer.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializer.Create">
            <summary>
            Creates a new <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> instance.
            The <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> will not use default settings 
            from <see cref="P:NewtonsoftFork.Json.JsonConvert.DefaultSettings"/>.
            </summary>
            <returns>
            A new <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> instance.
            The <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> will not use default settings 
            from <see cref="P:NewtonsoftFork.Json.JsonConvert.DefaultSettings"/>.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializer.Create(NewtonsoftFork.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> instance using the specified <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            The <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> will not use default settings 
            from <see cref="P:NewtonsoftFork.Json.JsonConvert.DefaultSettings"/>.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> instance using the specified <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            The <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> will not use default settings 
            from <see cref="P:NewtonsoftFork.Json.JsonConvert.DefaultSettings"/>.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializer.CreateDefault">
            <summary>
            Creates a new <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> instance.
            The <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> will use default settings 
            from <see cref="P:NewtonsoftFork.Json.JsonConvert.DefaultSettings"/>.
            </summary>
            <returns>
            A new <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> instance.
            The <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> will use default settings 
            from <see cref="P:NewtonsoftFork.Json.JsonConvert.DefaultSettings"/>.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializer.CreateDefault(NewtonsoftFork.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> instance using the specified <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            The <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> will use default settings 
            from <see cref="P:NewtonsoftFork.Json.JsonConvert.DefaultSettings"/> as well as the specified <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> instance using the specified <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            The <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> will use default settings 
            from <see cref="P:NewtonsoftFork.Json.JsonConvert.DefaultSettings"/> as well as the specified <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/>.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializer.Populate(NewtonsoftFork.Json.JsonReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializer.Deserialize(NewtonsoftFork.Json.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:NewtonsoftFork.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> that contains the JSON structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:System.IO.StringReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializer.Deserialize``1(NewtonsoftFork.Json.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:NewtonsoftFork.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> containing the object.</param>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>The instance of <typeparamref name="T"/> being deserialized.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializer.Deserialize(NewtonsoftFork.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:NewtonsoftFork.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializer.Serialize(NewtonsoftFork.Json.JsonWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:NewtonsoftFork.Json.JsonWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:NewtonsoftFork.Json.JsonSerializer.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:NewtonsoftFork.Json.JsonSerializer.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializer.Serialize(NewtonsoftFork.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            to a <c>Stream</c> using the specified <see cref="T:NewtonsoftFork.Json.JsonWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:NewtonsoftFork.Json.JsonWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonSerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> object.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
            <value>Reference loop handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
            <value>Missing member handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
            <value>Null value handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.Converters">
            <summary>
            Gets or sets a <see cref="T:NewtonsoftFork.Json.JsonConverter"/> collection that will be used during serialization.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
            <value>The preserve references handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
            <remarks>
            <see cref="P:NewtonsoftFork.Json.JsonSerializerSettings.TypeNameHandling"/> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="T:System.Runtime.Serialization.SerializationBinder"/>
            when deserializing with a value other than <c>TypeNameHandling.None</c>.
            </remarks>
            <value>The type name handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:NewtonsoftFork.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
            <value>The reference resolver.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.ReferenceResolverProvider">
            <summary>
            Gets or sets a function that creates the <see cref="T:NewtonsoftFork.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
            <value>A function that creates the <see cref="T:NewtonsoftFork.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:NewtonsoftFork.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.Error">
            <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
            <value>The error handler called during serialization and deserialization.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text, and the expected date format when reading JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:NewtonsoftFork.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling during serialization and deserialization.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonSerializerSettings.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonSerializerSettings"/> class.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonTextReader.ArrayPool">
            <summary>
            Gets or sets the reader's character buffer pool.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>A <see cref="T:System.Byte"/>[] or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextReader.Close">
            <summary>
            Changes the state to closed. 
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonTextReader.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonTextReader.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonTextWriter.ArrayPool">
            <summary>
            Gets or sets the writer's character array pool.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonTextWriter.Indentation">
            <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:NewtonsoftFork.Json.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonTextWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonTextWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <see cref="T:NewtonsoftFork.Json.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonTextWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <c>TextWriter</c> to write to.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteEnd(NewtonsoftFork.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonToken">
            <summary>
            Specifies the type of JSON token.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:NewtonsoftFork.Json.JsonReader"/> if a <see cref="M:NewtonsoftFork.Json.JsonReader.Read"/> method has not been called. 
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.StartConstructor">
            <summary>
            A constructor start token.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.EndConstructor">
            <summary>
            A constructor end token.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonWriter.CloseOutput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the writer is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the writer is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonWriter.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonWriter.Path">
            <summary>
            Gets the path of the writer. 
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonWriter.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonWriter.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonWriter.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling when writing JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonWriter.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonWriter.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written to JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonWriter.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatting when writing JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonWriter.Culture">
            <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.#ctor">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a JSON object.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteEndConstructor">
            <summary>
            Writes the end constructor.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current JSON object or array.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteToken(NewtonsoftFork.Json.JsonReader)">
            <summary>
            Writes the current <see cref="T:NewtonsoftFork.Json.JsonReader"/> token and its children.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> to read the token from.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteToken(NewtonsoftFork.Json.JsonReader,System.Boolean)">
            <summary>
            Writes the current <see cref="T:NewtonsoftFork.Json.JsonReader"/> token.
            </summary>
            <param name="reader">The <see cref="T:NewtonsoftFork.Json.JsonReader"/> to read the token from.</param>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteToken(NewtonsoftFork.Json.JsonToken,System.Object)">
            <summary>
            Writes the <see cref="T:NewtonsoftFork.Json.JsonToken"/> token and its value.
            </summary>
            <param name="token">The <see cref="T:NewtonsoftFork.Json.JsonToken"/> to write.</param>
            <param name="value">
            The value to write.
            A value is only required for tokens that have an associated value, e.g. the <see cref="T:System.String"/> property name for <see cref="F:NewtonsoftFork.Json.JsonToken.PropertyName"/>.
            A null value can be passed to the method for token's that don't have a value, e.g. <see cref="F:NewtonsoftFork.Json.JsonToken.StartObject"/>.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteToken(NewtonsoftFork.Json.JsonToken)">
            <summary>
            Writes the <see cref="T:NewtonsoftFork.Json.JsonToken"/> token.
            </summary>
            <param name="token">The <see cref="T:NewtonsoftFork.Json.JsonToken"/> to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteEnd(NewtonsoftFork.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriter.SetWriteState(NewtonsoftFork.Json.JsonToken,System.Object)">
            <summary>
            Sets the state of the JsonWriter,
            </summary>
            <param name="token">The JsonToken being written.</param>
            <param name="value">The value being written.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while reading JSON text.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.JsonWriterException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.JsonWriterException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.CommentHandling">
            <summary>
            Specifies how JSON comments are handled when loading JSON.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.CommentHandling.Ignore">
            <summary>
            Ignore comments.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.CommentHandling.Load">
            <summary>
            Load comments as a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> with type <see cref="F:NewtonsoftFork.Json.Linq.JTokenType.Comment"/>.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.LineInfoHandling">
            <summary>
            Specifies how line information is handled when loading JSON.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.LineInfoHandling.Ignore">
            <summary>
            Ignore line information.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.LineInfoHandling.Load">
            <summary>
            Load line information.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.Extensions">
            <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.Extensions.AncestorsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains every token in the source collection, the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:NewtonsoftFork.Json.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.Extensions.DescendantsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:NewtonsoftFork.Json.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains every token in the source collection, and the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{NewtonsoftFork.Json.Linq.JObject})">
            <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JProperty"/> that contains the properties of every object in the source collection.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{NewtonsoftFork.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{NewtonsoftFork.Json.Linq.JToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{NewtonsoftFork.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{NewtonsoftFork.Json.Linq.JToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{NewtonsoftFork.Json.Linq.JToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the source collection.</param>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <typeparam name="T">The source collection type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{NewtonsoftFork.Json.Linq.JToken})">
            <summary>
            Returns the input typed as <see cref="T:NewtonsoftFork.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:NewtonsoftFork.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:NewtonsoftFork.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:NewtonsoftFork.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.IJEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:NewtonsoftFork.Json.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.JArray">
            <summary>
            Represents a JSON array.
            </summary>
            <example>
              <code lang="cs" source="..\Src\NewtonsoftFork.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JArray.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JArray.Type">
            <summary>
            Gets the node type for this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.#ctor(NewtonsoftFork.Json.Linq.JArray)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> class from another <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> object.
            </summary>
            <param name="other">A <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> object to copy from.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.Load(NewtonsoftFork.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> from a <see cref="T:NewtonsoftFork.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:NewtonsoftFork.Json.JsonReader"/> that will be read for the content of the <see cref="T:NewtonsoftFork.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:NewtonsoftFork.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.Load(NewtonsoftFork.Json.JsonReader,NewtonsoftFork.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> from a <see cref="T:NewtonsoftFork.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:NewtonsoftFork.Json.JsonReader"/> that will be read for the content of the <see cref="T:NewtonsoftFork.Json.Linq.JArray"/>.</param>
            <param name="settings">The <see cref="T:NewtonsoftFork.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:NewtonsoftFork.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\NewtonsoftFork.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.Parse(System.String,NewtonsoftFork.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <param name="settings">The <see cref="T:NewtonsoftFork.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\NewtonsoftFork.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:NewtonsoftFork.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.FromObject(System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:NewtonsoftFork.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.WriteTo(NewtonsoftFork.Json.JsonWriter,NewtonsoftFork.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:NewtonsoftFork.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:NewtonsoftFork.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:NewtonsoftFork.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JArray.Item(System.Object)">
            <summary>
            Gets the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.IndexOf(NewtonsoftFork.Json.Linq.JToken)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.Insert(System.Int32,NewtonsoftFork.Json.Linq.JToken)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.Add(NewtonsoftFork.Json.Linq.JToken)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.Contains(NewtonsoftFork.Json.Linq.JToken)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.CopyTo(NewtonsoftFork.Json.Linq.JToken[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JArray.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JArray.Remove(NewtonsoftFork.Json.Linq.JToken)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.JConstructor">
            <summary>
            Represents a JSON constructor.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JConstructor.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JConstructor.Name">
            <summary>
            Gets or sets the name of this constructor.
            </summary>
            <value>The constructor name.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JConstructor.Type">
            <summary>
            Gets the node type for this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JConstructor"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JConstructor.#ctor(NewtonsoftFork.Json.Linq.JConstructor)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JConstructor"/> class from another <see cref="T:NewtonsoftFork.Json.Linq.JConstructor"/> object.
            </summary>
            <param name="other">A <see cref="T:NewtonsoftFork.Json.Linq.JConstructor"/> object to copy from.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JConstructor"/> class with the specified name.
            </summary>
            <param name="name">The constructor name.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JConstructor.WriteTo(NewtonsoftFork.Json.JsonWriter,NewtonsoftFork.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:NewtonsoftFork.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:NewtonsoftFork.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:NewtonsoftFork.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JConstructor.Item(System.Object)">
            <summary>
            Gets the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JConstructor.Load(NewtonsoftFork.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:NewtonsoftFork.Json.Linq.JConstructor"/> from a <see cref="T:NewtonsoftFork.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:NewtonsoftFork.Json.JsonReader"/> that will be read for the content of the <see cref="T:NewtonsoftFork.Json.Linq.JConstructor"/>.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:NewtonsoftFork.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JConstructor.Load(NewtonsoftFork.Json.JsonReader,NewtonsoftFork.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:NewtonsoftFork.Json.Linq.JConstructor"/> from a <see cref="T:NewtonsoftFork.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:NewtonsoftFork.Json.JsonReader"/> that will be read for the content of the <see cref="T:NewtonsoftFork.Json.Linq.JConstructor"/>.</param>
            <param name="settings">The <see cref="T:NewtonsoftFork.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:NewtonsoftFork.Json.JsonReader"/>.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.JContainer">
            <summary>
            Represents a token that can contain other tokens.
            </summary>
        </member>
        <member name="E:NewtonsoftFork.Json.Linq.JContainer.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="E:NewtonsoftFork.Json.Linq.JContainer.AddingNew">
            <summary>
            Occurs before an item is added to the collection.
            </summary>
        </member>
        <member name="E:NewtonsoftFork.Json.Linq.JContainer.CollectionChanged">
            <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JContainer.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary>
            Raises the <see cref="E:NewtonsoftFork.Json.Linq.JContainer.AddingNew"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:NewtonsoftFork.Json.Linq.JContainer.ListChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:NewtonsoftFork.Json.Linq.JContainer.CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JContainer.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JContainer.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>
            A <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> containing the first child token of the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JContainer.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>
            A <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> containing the last child token of the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JContainer.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JContainer.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JContainer.Descendants">
            <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the descendant tokens of the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JContainer.DescendantsAndSelf">
            <summary>
            Returns a collection of the tokens that contain this token, and all descendant tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing this token, and all the descendant tokens of the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JContainer.Add(System.Object)">
            <summary>
            Adds the specified content as children of this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>
            Adds the specified content as the first children of this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JContainer.CreateWriter">
            <summary>
            Creates an <see cref="T:NewtonsoftFork.Json.JsonWriter"/> that can be used to add tokens to the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <returns>An <see cref="T:NewtonsoftFork.Json.JsonWriter"/> that is ready to have content written to it.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JContainer.RemoveAll">
            <summary>
            Removes the child nodes from this token.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JContainer.Merge(System.Object)">
            <summary>
            Merge the specified content into this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be merged.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JContainer.Merge(System.Object,NewtonsoftFork.Json.Linq.JsonMergeSettings)">
            <summary>
            Merge the specified content into this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> using <see cref="T:NewtonsoftFork.Json.Linq.JsonMergeSettings"/>.
            </summary>
            <param name="content">The content to be merged.</param>
            <param name="settings">The <see cref="T:NewtonsoftFork.Json.Linq.JsonMergeSettings"/> used to merge the content.</param>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JContainer.Count">
            <summary>
            Gets the count of child JSON tokens.
            </summary>
            <value>The count of child JSON tokens</value>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.JEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JEnumerable`1.Empty">
            <summary>
            An empty collection of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> objects.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JEnumerable`1"/> struct.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:NewtonsoftFork.Json.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JEnumerable`1.Equals(NewtonsoftFork.Json.Linq.JEnumerable{`0})">
            <summary>
            Determines whether the specified <see cref="T:NewtonsoftFork.Json.Linq.JEnumerable`1"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:NewtonsoftFork.Json.Linq.JEnumerable`1"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:NewtonsoftFork.Json.Linq.JEnumerable`1"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.JObject">
            <summary>
            Represents a JSON object.
            </summary>
            <example>
              <code lang="cs" source="..\Src\NewtonsoftFork.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JObject.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="E:NewtonsoftFork.Json.Linq.JObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:NewtonsoftFork.Json.Linq.JObject.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.#ctor(NewtonsoftFork.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> class from another <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> object.
            </summary>
            <param name="other">A <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> object to copy from.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JObject.Type">
            <summary>
            Gets the node type for this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.Properties">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.Property(System.String)">
            <summary>
            Gets a <see cref="T:NewtonsoftFork.Json.Linq.JProperty"/> the specified name.
            </summary>
            <param name="name">The property name.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JProperty"/> with the specified name or null.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.PropertyValues">
            <summary>
            Gets an <see cref="T:NewtonsoftFork.Json.Linq.JEnumerable`1"/> of this object's property values.
            </summary>
            <returns>An <see cref="T:NewtonsoftFork.Json.Linq.JEnumerable`1"/> of this object's property values.</returns>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JObject.Item(System.Object)">
            <summary>
            Gets the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <value></value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.Load(NewtonsoftFork.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> from a <see cref="T:NewtonsoftFork.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:NewtonsoftFork.Json.JsonReader"/> that will be read for the content of the <see cref="T:NewtonsoftFork.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:NewtonsoftFork.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.Load(NewtonsoftFork.Json.JsonReader,NewtonsoftFork.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> from a <see cref="T:NewtonsoftFork.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:NewtonsoftFork.Json.JsonReader"/> that will be read for the content of the <see cref="T:NewtonsoftFork.Json.Linq.JObject"/>.</param>
            <param name="settings">The <see cref="T:NewtonsoftFork.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:NewtonsoftFork.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\NewtonsoftFork.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.Parse(System.String,NewtonsoftFork.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <param name="settings">The <see cref="T:NewtonsoftFork.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\NewtonsoftFork.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:NewtonsoftFork.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> with the values of the specified object</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.FromObject(System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:NewtonsoftFork.Json.Linq.JObject"/>.</param>
            <param name="jsonSerializer">The <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JObject"/> with the values of the specified object</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.WriteTo(NewtonsoftFork.Json.JsonWriter,NewtonsoftFork.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:NewtonsoftFork.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:NewtonsoftFork.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:NewtonsoftFork.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.GetValue(System.String)">
            <summary>
            Gets the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,NewtonsoftFork.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns><c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.Add(System.String,NewtonsoftFork.Json.Linq.JToken)">
            <summary>
            Adds the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.Remove(System.String)">
            <summary>
            Removes the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if item was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.TryGetValue(System.String,NewtonsoftFork.Json.Linq.JToken@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:NewtonsoftFork.Json.Linq.JObject.PropertyChanged"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:NewtonsoftFork.Json.Linq.JObject.PropertyChanging"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>
            Returns the properties for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties for this component instance.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the filtered properties for this component instance.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
            <summary>
            Returns a collection of custom attributes for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.AttributeCollection"/> containing the attributes for this object.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <summary>
            Returns the class name of this instance of a component.
            </summary>
            <returns>
            The class name of the object, or null if the class does not have a name.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <summary>
            Returns the name of this instance of a component.
            </summary>
            <returns>
            The name of the object, or null if the object does not have a name.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
            <summary>
            Returns a type converter for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter"/> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter"/> for this object.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
            <summary>
            Returns the default event for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptor"/> that represents the default event for this object, or null if this object does not have events.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
            <summary>
            Returns the default property for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the default property for this object, or null if this object does not have properties.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this instance of a component.
            </summary>
            <param name="editorBaseType">A <see cref="T:System.Type"/> that represents the editor for this object.</param>
            <returns>
            An <see cref="T:System.Object"/> of the specified type that is the editor for this object, or null if the editor cannot be found.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this instance of a component using the specified attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the filtered events for this component instance.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>
            Returns the events for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the events for this component instance.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the property whose owner is to be found.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the owner of the specified property.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.JProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JProperty.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JProperty.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JProperty.#ctor(NewtonsoftFork.Json.Linq.JProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JProperty"/> class from another <see cref="T:NewtonsoftFork.Json.Linq.JProperty"/> object.
            </summary>
            <param name="other">A <see cref="T:NewtonsoftFork.Json.Linq.JProperty"/> object to copy from.</param>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JProperty.Type">
            <summary>
            Gets the node type for this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JProperty.WriteTo(NewtonsoftFork.Json.JsonWriter,NewtonsoftFork.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:NewtonsoftFork.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:NewtonsoftFork.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:NewtonsoftFork.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JProperty.Load(NewtonsoftFork.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:NewtonsoftFork.Json.Linq.JProperty"/> from a <see cref="T:NewtonsoftFork.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:NewtonsoftFork.Json.JsonReader"/> that will be read for the content of the <see cref="T:NewtonsoftFork.Json.Linq.JProperty"/>.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:NewtonsoftFork.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JProperty.Load(NewtonsoftFork.Json.JsonReader,NewtonsoftFork.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:NewtonsoftFork.Json.Linq.JProperty"/> from a <see cref="T:NewtonsoftFork.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:NewtonsoftFork.Json.JsonReader"/> that will be read for the content of the <see cref="T:NewtonsoftFork.Json.Linq.JProperty"/>.</param>
            <param name="settings">The <see cref="T:NewtonsoftFork.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:NewtonsoftFork.Json.JsonReader"/>.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.JPropertyDescriptor">
            <summary>
            Represents a view of a <see cref="T:NewtonsoftFork.Json.Linq.JProperty"/>.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JPropertyDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <returns>
            <c>true</c> if resetting the component changes its value; otherwise, <c>false</c>.
            </returns>
            <param name="component">The component to test for reset capability.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <returns>
            The value of a property for a given component.
            </returns>
            <param name="component">The component with the property for which to retrieve the value. 
                            </param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value. 
                            </param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set. 
                            </param><param name="value">The new value. 
                            </param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <returns>
            <c>true</c> if the property should be persisted; otherwise, <c>false</c>.
            </returns>
            <param name="component">The component with the property to be examined for persistence.</param>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JPropertyDescriptor.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/> methods are invoked, the object specified might be an instance of this type.
            </returns>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <returns>
            <c>true</c> if the property is read-only; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the property.
            </returns>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JPropertyDescriptor.NameHashCode">
            <summary>
            Gets the hash code for the name of the member.
            </summary>
            <value></value>
            <returns>
            The hash code for the name of the member.
            </returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.JRaw">
            <summary>
            Represents a raw JSON string.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JRaw.#ctor(NewtonsoftFork.Json.Linq.JRaw)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JRaw"/> class from another <see cref="T:NewtonsoftFork.Json.Linq.JRaw"/> object.
            </summary>
            <param name="other">A <see cref="T:NewtonsoftFork.Json.Linq.JRaw"/> object to copy from.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JRaw.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JRaw"/> class.
            </summary>
            <param name="rawJson">The raw json.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JRaw.Create(NewtonsoftFork.Json.JsonReader)">
            <summary>
            Creates an instance of <see cref="T:NewtonsoftFork.Json.Linq.JRaw"/> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <returns>An instance of <see cref="T:NewtonsoftFork.Json.Linq.JRaw"/> with the content of the reader's current token.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.JsonLoadSettings">
            <summary>
            Specifies the settings used when loading JSON.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JsonLoadSettings.CommentHandling">
            <summary>
            Gets or sets how JSON comments are handled when loading JSON.
            </summary>
            <value>The JSON comment handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JsonLoadSettings.LineInfoHandling">
            <summary>
            Gets or sets how JSON line info is handled when loading JSON.
            </summary>
            <value>The JSON line info handling.</value>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.JsonMergeSettings">
            <summary>
            Specifies the settings used when merging JSON.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JsonMergeSettings.MergeArrayHandling">
            <summary>
            Gets or sets the method used when merging JSON arrays.
            </summary>
            <value>The method used when merging JSON arrays.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JsonMergeSettings.MergeNullValueHandling">
            <summary>
            Gets or sets how how null value properties are merged.
            </summary>
            <value>How null value properties are merged.</value>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JToken.EqualityComparer">
            <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
            <value>A <see cref="T:NewtonsoftFork.Json.Linq.JTokenEqualityComparer"/> that can compare two nodes for value equality.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JToken.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JToken.Root">
            <summary>
            Gets the root <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> of this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <value>The root <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> of this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JToken.Type">
            <summary>
            Gets the node type for this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JToken.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.DeepEquals(NewtonsoftFork.Json.Linq.JToken,NewtonsoftFork.Json.Linq.JToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to compare.</param>
            <param name="t2">The second <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to compare.</param>
            <returns><c>true</c> if the tokens are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JToken.Next">
            <summary>
            Gets the next sibling token of this node.
            </summary>
            <value>The <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the next sibling token.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JToken.Previous">
            <summary>
            Gets the previous sibling token of this node.
            </summary>
            <value>The <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the previous sibling token.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JToken.Path">
            <summary>
            Gets the path of the JSON token. 
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>
            Adds the specified content immediately after this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>
            Adds the specified content immediately before this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.Ancestors">
            <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
            <returns>A collection of the ancestor tokens of this token.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.AncestorsAndSelf">
            <summary>
            Returns a collection of tokens that contain this token, and the ancestors of this token.
            </summary>
            <returns>A collection of tokens that contain this token, and the ancestors of this token.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.AfterSelf">
            <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.BeforeSelf">
            <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens before this token, in document order.</returns>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JToken.Item(System.Object)">
            <summary>
            Gets the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.Value``1(System.Object)">
            <summary>
            Gets the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JToken.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>A <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> containing the first child token of the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JToken.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>A <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> containing the last child token of the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.Children``1">
            <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
            <typeparam name="T">The type to filter the child tokens on.</typeparam>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JEnumerable`1"/> containing the child tokens of this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.Remove">
            <summary>
            Removes this token from its parent.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.Replace(NewtonsoftFork.Json.Linq.JToken)">
            <summary>
            Replaces this token with the specified token.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.WriteTo(NewtonsoftFork.Json.JsonWriter,NewtonsoftFork.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:NewtonsoftFork.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:NewtonsoftFork.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:NewtonsoftFork.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.ToString(NewtonsoftFork.Json.Formatting,NewtonsoftFork.Json.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection of <see cref="T:NewtonsoftFork.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.DateTimeOffset">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Char">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Char"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Byte">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.SByte">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.SByte}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Byte"/>[].
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Guid">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Explicit(NewtonsoftFork.Json.Linq.JToken)~System.Uri">
            <summary>
            Performs an explicit conversion from <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to <see cref="T:System.Uri"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Boolean)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Byte)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.SByte)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.SByte"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Int64)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Int16)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.UInt16)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Int32)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.DateTime)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Decimal)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Double)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Single)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.String)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.UInt32)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.UInt64)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Byte[])~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/>[] to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Uri)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.TimeSpan)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Guid)~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~NewtonsoftFork.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.CreateReader">
            <summary>
            Creates an <see cref="T:NewtonsoftFork.Json.JsonReader"/> for this token.
            </summary>
            <returns>An <see cref="T:NewtonsoftFork.Json.JsonReader"/> that can be used to read this token and its descendants.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.FromObject(System.Object,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> from an object using the specified <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</param>
            <param name="jsonSerializer">The <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> that will be used when reading the object.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.ToObject``1">
            <summary>
            Creates the specified .NET type from the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.ToObject(System.Type)">
            <summary>
            Creates the specified .NET type from the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.ToObject``1(NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> using the specified <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <param name="jsonSerializer">The <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.ToObject(System.Type,NewtonsoftFork.Json.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> using the specified <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <param name="jsonSerializer">The <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.ReadFrom(NewtonsoftFork.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> from a <see cref="T:NewtonsoftFork.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:NewtonsoftFork.Json.JsonReader"/> positioned at the token to read into this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.ReadFrom(NewtonsoftFork.Json.JsonReader,NewtonsoftFork.Json.Linq.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> from a <see cref="T:NewtonsoftFork.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:NewtonsoftFork.Json.JsonReader"/> positioned at the token to read into this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</param>
            <param name="settings">The <see cref="T:NewtonsoftFork.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>
            An <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.Parse(System.String,NewtonsoftFork.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <param name="settings">The <see cref="T:NewtonsoftFork.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.Load(NewtonsoftFork.Json.JsonReader,NewtonsoftFork.Json.Linq.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> from a <see cref="T:NewtonsoftFork.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:NewtonsoftFork.Json.JsonReader"/> positioned at the token to read into this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</param>
            <param name="settings">The <see cref="T:NewtonsoftFork.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is null, default load settings will be used.</param>
            <returns>
            An <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.Load(NewtonsoftFork.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> from a <see cref="T:NewtonsoftFork.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:NewtonsoftFork.Json.JsonReader"/> positioned at the token to read into this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.SelectToken(System.String)">
            <summary>
            Selects a <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>, or null.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects a <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.SelectTokens(System.String)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the selected elements.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the selected elements.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.DeepClone">
            <summary>
            Creates a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>. All child tokens are recursively cloned.
            </summary>
            <returns>A new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.AddAnnotation(System.Object)">
            <summary>
            Adds an object to the annotation list of this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="annotation">The annotation to add.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.Annotation``1">
            <summary>
            Get the first annotation object of the specified type from this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of the annotation to retrieve.</typeparam>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.Annotation(System.Type)">
            <summary>
            Gets the first annotation object of the specified type from this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:NewtonsoftFork.Json.Linq.JToken.Type"/> of the annotation to retrieve.</param>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.Annotations``1">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of the annotations to retrieve.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>  that contains the annotations for this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.Annotations(System.Type)">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:NewtonsoftFork.Json.Linq.JToken.Type"/> of the annotations to retrieve.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Object"/> that contains the annotations that match the specified type for this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.RemoveAnnotations``1">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of annotations to remove.</typeparam>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JToken.RemoveAnnotations(System.Type)">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:NewtonsoftFork.Json.Linq.JToken.Type"/> of annotations to remove.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.JTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenEqualityComparer.Equals(NewtonsoftFork.Json.Linq.JToken,NewtonsoftFork.Json.Linq.JToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> to compare.</param>
            <returns>
            <c>true</c> if the specified objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenEqualityComparer.GetHashCode(NewtonsoftFork.Json.Linq.JToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.JTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JTokenReader.CurrentToken">
            <summary>
            Gets the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> at the reader's current position.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenReader.#ctor(NewtonsoftFork.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JTokenReader"/> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JTokenReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.Constructor">
            <summary>
            A JSON constructor.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.Guid">
            <summary>
            A Guid value.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.Uri">
            <summary>
            A Uri value.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.JTokenType.TimeSpan">
            <summary>
            A TimeSpan value.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.JTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JTokenWriter.CurrentToken">
            <summary>
            Gets the <see cref="T:NewtonsoftFork.Json.Linq.JToken"/> at the writer's current position.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JTokenWriter.Token">
            <summary>
            Gets the token being writen.
            </summary>
            <value>The token being writen.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.#ctor(NewtonsoftFork.Json.Linq.JContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JTokenWriter"/> class writing to the given <see cref="T:NewtonsoftFork.Json.Linq.JContainer"/>.
            </summary>
            <param name="container">The container being written to.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JTokenWriter"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteEnd(NewtonsoftFork.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.JValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.#ctor(NewtonsoftFork.Json.Linq.JValue)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> class from another <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> object.
            </summary>
            <param name="other">A <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> object to copy from.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JValue.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.CreateComment(System.String)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> comment with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> comment with the given value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.CreateString(System.String)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> string with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> string with the given value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.CreateNull">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> null value.
            </summary>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> null value.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.CreateUndefined">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> undefined value.
            </summary>
            <returns>A <see cref="T:NewtonsoftFork.Json.Linq.JValue"/> undefined value.</returns>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JValue.Type">
            <summary>
            Gets the node type for this <see cref="T:NewtonsoftFork.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Linq.JValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.WriteTo(NewtonsoftFork.Json.JsonWriter,NewtonsoftFork.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:NewtonsoftFork.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:NewtonsoftFork.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:NewtonsoftFork.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.Equals(NewtonsoftFork.Json.Linq.JValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Linq.JValue.CompareTo(NewtonsoftFork.Json.Linq.JValue)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj"/>.
            Zero
            This instance is equal to <paramref name="obj"/>.
            Greater than zero
            This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not the same type as this instance.
            </exception>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.MergeArrayHandling">
            <summary>
            Specifies how JSON arrays are merged together.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.MergeArrayHandling.Concat">
            <summary>Concatenate arrays.</summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.MergeArrayHandling.Union">
            <summary>Union arrays, skipping items that already exist.</summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.MergeArrayHandling.Replace">
            <summary>Replace all array items.</summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.MergeArrayHandling.Merge">
            <summary>Merge array items together, matched by index.</summary>
        </member>
        <member name="T:NewtonsoftFork.Json.Linq.MergeNullValueHandling">
            <summary>
            Specifies how null value properties are merged.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.MergeNullValueHandling.Ignore">
            <summary>
            The content's null value properties will be ignored during merging.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Linq.MergeNullValueHandling.Merge">
            <summary>
            The content's null value properties will be merged.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.MemberSerialization">
            <summary>
            Specifies the member serialization options for the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.MemberSerialization.OptOut">
            <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:NewtonsoftFork.Json.JsonIgnoreAttribute"/> or <see cref="T:System.NonSerializedAttribute"/>.
            This is the default member serialization mode.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.MemberSerialization.OptIn">
            <summary>
            Only members marked with <see cref="T:NewtonsoftFork.Json.JsonPropertyAttribute"/> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.MemberSerialization.Fields">
            <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:NewtonsoftFork.Json.JsonIgnoreAttribute"/> or <see cref="T:System.NonSerializedAttribute"/>.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute"/>
            and setting IgnoreSerializableAttribute on <see cref="T:NewtonsoftFork.Json.Serialization.DefaultContractResolver"/> to false.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.MetadataPropertyHandling">
            <summary>
            Specifies metadata property handling options for the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.MetadataPropertyHandling.Default">
            <summary>
            Read metadata properties located at the start of a JSON object.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.MetadataPropertyHandling.ReadAhead">
            <summary>
            Read metadata properties located anywhere in a JSON object. Note that this setting will impact performance.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.MetadataPropertyHandling.Ignore">
            <summary>
            Do not try to read metadata properties.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.MissingMemberHandling">
            <summary>
            Specifies missing member handling options for the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.MissingMemberHandling.Ignore">
            <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.MissingMemberHandling.Error">
            <summary>
            Throw a <see cref="T:NewtonsoftFork.Json.JsonSerializationException"/> when a missing member is encountered during deserialization.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.NullValueHandling">
            <summary>
            Specifies null value handling options for the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\NewtonsoftFork.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
              <code lang="cs" source="..\Src\NewtonsoftFork.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:NewtonsoftFork.Json.NullValueHandling.Include">
            <summary>
            Include null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.NullValueHandling.Ignore">
            <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.ObjectCreationHandling">
            <summary>
            Specifies how object creation is handled by the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.ObjectCreationHandling.Auto">
            <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.ObjectCreationHandling.Reuse">
            <summary>
            Only reuse existing objects.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.ObjectCreationHandling.Replace">
            <summary>
            Always create new objects.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.PreserveReferencesHandling">
            <summary>
            Specifies reference handling options for the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement ISerializable.
            </summary>
            <example>
              <code lang="cs" source="..\Src\NewtonsoftFork.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />       
            </example>
        </member>
        <member name="F:NewtonsoftFork.Json.PreserveReferencesHandling.None">
            <summary>
            Do not preserve references when serializing types.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.PreserveReferencesHandling.Objects">
            <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.PreserveReferencesHandling.Arrays">
            <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.PreserveReferencesHandling.All">
            <summary>
            Preserve references when serializing.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:NewtonsoftFork.Json.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.Required">
            <summary>
            Indicating whether a property is required.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Required.Default">
            <summary>
            The property is not required. The default state.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Required.AllowNull">
            <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Required.Always">
            <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.Required.DisallowNull">
            <summary>
            The property is not required but it cannot be a null value.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.CamelCaseNamingStrategy">
            <summary>
            A camel case naming strategy.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.CamelCaseNamingStrategy"/> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:NewtonsoftFork.Json.JsonPropertyAttribute"/>.
            </param>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.CamelCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.CamelCaseNamingStrategy"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.CamelCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.CamelCasePropertyNamesContractResolver"/> class.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.DefaultContractResolver">
            <summary>
            Used by <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> to resolves a <see cref="T:NewtonsoftFork.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
            <value>
            	<c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>
            Gets or sets the default members search flags.
            </summary>
            <value>The default members search flags.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
            <value>
            	<c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface when serializing and deserializing types.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute"/> attribute when serializing and deserializing types.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.SerializableAttribute"/> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.DefaultContractResolver.NamingStrategy">
            <summary>
            Gets or sets the naming strategy used to resolve how property names and dictionary keys are serialized.
            </summary>
            <value>The naming strategy used to resolve how property names and dictionary keys are serialized.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
            <param name="shareCache">
            If set to <c>true</c> the <see cref="T:NewtonsoftFork.Json.Serialization.DefaultContractResolver"/> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly improve performance with multiple resolver instances because expensive reflection will only
            happen once. This setting can cause unexpected behavior if different instances of the resolver are suppose to produce different
            results. When set to false it is highly recommended to reuse <see cref="T:NewtonsoftFork.Json.Serialization.DefaultContractResolver"/> instances with the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </param>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Serialization.JsonObjectContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Serialization.JsonObjectContract"/> for the given type.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,NewtonsoftFork.Json.Serialization.JsonPropertyCollection)">
            <summary>
            Creates the constructor parameters.
            </summary>
            <param name="constructor">The constructor to create properties for.</param>
            <param name="memberProperties">The type's member properties.</param>
            <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(NewtonsoftFork.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="matchingMemberProperty">The matching member property.</param>
            <param name="parameterInfo">The constructor parameter.</param>
            <returns>A created <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            Resolves the default <see cref="T:NewtonsoftFork.Json.JsonConverter" /> for the contract.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The contract's default <see cref="T:NewtonsoftFork.Json.JsonConverter" />.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Serialization.JsonDictionaryContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Serialization.JsonDictionaryContract"/> for the given type.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Serialization.JsonArrayContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Serialization.JsonArrayContract"/> for the given type.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Serialization.JsonPrimitiveContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Serialization.JsonPrimitiveContract"/> for the given type.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Serialization.JsonLinqContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Serialization.JsonLinqContract"/> for the given type.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Serialization.JsonISerializableContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Serialization.JsonISerializableContract"/> for the given type.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Serialization.JsonDynamicContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Serialization.JsonDynamicContract"/> for the given type.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Serialization.JsonStringContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Serialization.JsonStringContract"/> for the given type.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            Determines which contract type is created for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:NewtonsoftFork.Json.Serialization.JsonContract"/> for the given type.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,NewtonsoftFork.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:NewtonsoftFork.Json.Serialization.JsonContract"/>.
            </summary>
            <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>Properties for the given <see cref="T:NewtonsoftFork.Json.Serialization.JsonContract"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Creates the <see cref="T:NewtonsoftFork.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:NewtonsoftFork.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,NewtonsoftFork.Json.MemberSerialization)">
            <summary>
            Creates a <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberSerialization">The member's parent <see cref="T:NewtonsoftFork.Json.MemberSerialization"/>.</param>
            <param name="member">The member to create a <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> for.</param>
            <returns>A created <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Resolved name of the property.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(System.String)">
            <summary>
            Resolves the key of the dictionary. By default <see cref="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)"/> is used to resolve dictionary keys.
            </summary>
            <param name="dictionaryKey">Key of the dictionary.</param>
            <returns>Resolved key of the dictionary.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>
            Gets the resolved name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.DefaultNamingStrategy">
            <summary>
            The default naming strategy. Property names and dictionary keys are unchanged.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.DefaultSerializationBinder">
            <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object. </param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object. </param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.DiagnosticsTraceWriter">
            <summary>
            Represents a trace writer that writes to the application's <see cref="T:System.Diagnostics.TraceListener"/> instances.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.DynamicValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using dynamic methods.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.DynamicValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.ErrorContext">
            <summary>
            Provides information surrounding an error.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.ErrorContext.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.ErrorContext.OriginalObject">
            <summary>
            Gets the original object that caused the error.
            </summary>
            <value>The original object that caused the error.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.ErrorContext.Member">
            <summary>
            Gets the member that caused the error.
            </summary>
            <value>The member that caused the error.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.ErrorContext.Path">
            <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
            <value>The path of the JSON location where the error occurred.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.ErrorContext.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NewtonsoftFork.Json.Serialization.ErrorContext"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>
            Gets the current object the error event is being raised against.
            </summary>
            <value>The current object the error event is being raised against.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>
            Gets the error context.
            </summary>
            <value>The error context.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.ErrorEventArgs.#ctor(System.Object,NewtonsoftFork.Json.Serialization.ErrorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.ErrorEventArgs"/> class.
            </summary>
            <param name="currentObject">The current object.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.ExpressionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using dynamic methods.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.ExpressionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.IAttributeProvider">
            <summary>
            Provides methods to get attributes.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.IAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.IAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.IContractResolver">
            <summary>
            Used by <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> to resolves a <see cref="T:NewtonsoftFork.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\NewtonsoftFork.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
              <code lang="cs" source="..\Src\NewtonsoftFork.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
            </example>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.IReferenceResolver">
            <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            Resolves a reference to its object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference to resolve.</param>
            <returns>The object that</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            Gets the reference for the sepecified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to get a reference for.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is referenced.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to test for a reference.</param>
            <returns>
            	<c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            Adds a reference to the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference.</param>
            <param name="value">The object to reference.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.ITraceWriter">
            <summary>
            Represents a trace writer.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.ITraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.IValueProvider">
            <summary>
            Provides methods to get and set values.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.JsonArrayContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonArrayContract.CollectionItemType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the collection items.
            </summary>
            <value>The <see cref="T:System.Type"/> of the collection items.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
            <value><c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonArrayContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:NewtonsoftFork.Json.Serialization.JsonContract.DefaultCreator"/>.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonArrayContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the collection values.
            </summary>
            <value><c>true</c> if the creator has a parameter with the collection values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.JsonArrayContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.JsonContainerContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContainerContract.ItemConverter">
            <summary>
            Gets or sets the default collection items <see cref="T:NewtonsoftFork.Json.JsonConverter" />.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContainerContract.ItemIsReference">
            <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
            <value><c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>
            Gets or sets the collection item type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.JsonContainerContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.SerializationCallback">
            <summary>
            Handles <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> serialization callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.SerializationErrorCallback">
            <summary>
            Handles <see cref="T:NewtonsoftFork.Json.JsonSerializer"/> serialization error callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.ExtensionDataSetter">
            <summary>
            Sets extension data for an object during deserialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
            <param name="key">The extension data key.</param>
            <param name="value">The extension data value.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.ExtensionDataGetter">
            <summary>
            Gets extension data for an object during serialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.JsonContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type for the contract.
            </summary>
            <value>The underlying type for the contract.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContract.CreatedType">
            <summary>
            Gets or sets the type created during deserialization.
            </summary>
            <value>The type created during deserialization.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContract.IsReference">
            <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
            <value>Whether this type contract is serialized as a reference.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContract.Converter">
            <summary>
            Gets or sets the default <see cref="T:NewtonsoftFork.Json.JsonConverter" /> for this contract.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContract.OnDeserializedCallbacks">
            <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
            <value>The methods called immediately after deserialization of the object.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContract.OnDeserializingCallbacks">
            <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
            <value>The methods called during deserialization of the object.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContract.OnSerializedCallbacks">
            <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
            <value>The methods called after serialization of the object graph.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContract.OnSerializingCallbacks">
            <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
            <value>The methods called before serialization of the object.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContract.OnErrorCallbacks">
            <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The methods called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContract.OnDeserialized">
            <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
            <value>The method called immediately after deserialization of the object.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContract.OnDeserializing">
            <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
            <value>The method called during deserialization of the object.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContract.OnSerialized">
            <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
            <value>The method called after serialization of the object graph.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContract.OnSerializing">
            <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
            <value>The method called before serialization of the object.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContract.OnError">
            <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The method called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContract.DefaultCreator">
            <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
            <value>The default creator method used to create the object.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>
            Gets or sets a value indicating whether the default creator is non public.
            </summary>
            <value><c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.JsonDictionaryContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonDictionaryContract.DictionaryKeyResolver">
            <summary>
            Gets or sets the dictionary key resolver.
            </summary>
            <value>The dictionary key resolver.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary keys.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary keys.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary values.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary values.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonDictionaryContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:NewtonsoftFork.Json.Serialization.JsonContract.DefaultCreator"/>.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonDictionaryContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the dictionary values.
            </summary>
            <value><c>true</c> if the creator has a parameter with the dictionary values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.JsonDictionaryContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.JsonDynamicContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonDynamicContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.JsonDynamicContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.JsonISerializableContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonISerializableContract.ISerializableCreator">
            <summary>
            Gets or sets the ISerializable object constructor.
            </summary>
            <value>The ISerializable object constructor.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.JsonISerializableContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.JsonLinqContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.JsonLinqContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.JsonObjectContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>
            Gets or sets the object member serialization.
            </summary>
            <value>The member object serialization.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonObjectContract.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonObjectContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonObjectContract.ConstructorParameters">
            <summary>
            Gets the constructor parameters required for any non-default constructor
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonObjectContract.CreatorParameters">
            <summary>
            Gets a collection of <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> instances that define the parameters used with <see cref="P:NewtonsoftFork.Json.Serialization.JsonObjectContract.OverrideCreator"/>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonObjectContract.OverrideConstructor">
            <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
            <value>The override constructor.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
            <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
            <value>The parametrized constructor.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonObjectContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:NewtonsoftFork.Json.Serialization.JsonContract.DefaultCreator"/>.
            This function is called with a collection of arguments which are defined by the <see cref="P:NewtonsoftFork.Json.Serialization.JsonObjectContract.CreatorParameters"/> collection.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
            <summary>
            Gets or sets the extension data setter.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
            <summary>
            Gets or sets the extension data getter.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonObjectContract.ExtensionDataValueType">
            <summary>
            Gets or sets the extension data value type.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.JsonObjectContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.JsonPrimitiveContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.JsonPrimitiveContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.JsonProperty">
            <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.DeclaringType">
            <summary>
            Gets or sets the type that declared this property.
            </summary>
            <value>The type that declared this property.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
            <value>The name of the underlying member or parameter.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.ValueProvider">
            <summary>
            Gets the <see cref="T:NewtonsoftFork.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> during serialization.
            </summary>
            <value>The <see cref="T:NewtonsoftFork.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> during serialization.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.AttributeProvider">
            <summary>
            Gets or sets the <see cref="T:NewtonsoftFork.Json.Serialization.IAttributeProvider"/> for this property.
            </summary>
            <value>The <see cref="T:NewtonsoftFork.Json.Serialization.IAttributeProvider"/> for this property.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.Converter">
            <summary>
            Gets or sets the <see cref="T:NewtonsoftFork.Json.JsonConverter" /> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.MemberConverter">
            <summary>
            Gets or sets the member converter.
            </summary>
            <value>The member converter.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.Ignored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.Readable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> is readable.
            </summary>
            <value><c>true</c> if readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.Writable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> is writable.
            </summary>
            <value><c>true</c> if writable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.HasMemberAttribute">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> has a member attribute.
            </summary>
            <value><c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> is required.
            </summary>
            <value>A value indicating whether this <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> is required.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.IsReference">
            <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
            <value>
            	<c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>
            Gets or sets the property null value handling.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>
            Gets or sets the property default value handling.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>
            Gets or sets the property reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>
            Gets or sets the property object creation handling.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>
            Gets or sets or sets the type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
            <value>A predicate used to determine whether the property should be serialize.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.ShouldDeserialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be deserialized.
            </summary>
            <value>A predicate used to determine whether the property should be deserialized.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
            <value>An action used to set whether the property has been deserialized.</value>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.JsonProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.ItemConverter">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.JsonPropertyCollection">
            <summary>
            A collection of <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> objects.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.JsonPropertyCollection"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.JsonPropertyCollection.GetKeyForItem(NewtonsoftFork.Json.Serialization.JsonProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.JsonPropertyCollection.AddProperty(NewtonsoftFork.Json.Serialization.JsonProperty)">
            <summary>
            Adds a <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> object.
            </summary>
            <param name="property">The property to add to the collection.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            Gets the closest matching <see cref="T:NewtonsoftFork.Json.Serialization.JsonProperty"/> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>
            Gets a property by property name.
            </summary>
            <param name="propertyName">The name of the property to get.</param>
            <param name="comparisonType">Type property name string comparison.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.JsonStringContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.JsonStringContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type,System.Object[])">
            <summary>
            Lookup and create an instance of the JsonConverter type described by the argument.
            </summary>
            <param name="converterType">The JsonConverter type to create.</param>
            <param name="converterArgs">Optional arguments to pass to an initializing constructor of the JsonConverter.
            If null, the default constructor is used.</param>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.MemoryTraceWriter">
            <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.MemoryTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.MemoryTraceWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.MemoryTraceWriter"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
            <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
            <returns>An enumeration of the most recent trace messages.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.MemoryTraceWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> of the most recent trace messages.
            </summary>
            <returns>
            A <see cref="T:System.String"/> of the most recent trace messages.
            </returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.NamingStrategy">
            <summary>
            A base class for resolving how property names and dictionary keys are serialized.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.NamingStrategy.ProcessDictionaryKeys">
            <summary>
            A flag indicating whether dictionary keys should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:NewtonsoftFork.Json.Serialization.NamingStrategy.OverrideSpecifiedNames">
            <summary>
            A flag indicating whether explicitly specified property names,
            e.g. a property name customized with a <see cref="T:NewtonsoftFork.Json.JsonPropertyAttribute"/>, should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.NamingStrategy.GetPropertyName(System.String,System.Boolean)">
            <summary>
            Gets the serialized name for a given property name.
            </summary>
            <param name="name">The initial property name.</param>
            <param name="hasSpecifiedName">A flag indicating whether the property has had a name explicitly specfied.</param>
            <returns>The serialized property name.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.NamingStrategy.GetDictionaryKey(System.String)">
            <summary>
            Gets the serialized key for a given dictionary key.
            </summary>
            <param name="key">The initial dictionary key.</param>
            <returns>The serialized dictionary key.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.NamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.ObjectConstructor`1">
            <summary>
            Represents a method that constructs an object.
            </summary>
            <typeparam name="T">The object type to create.</typeparam>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.OnErrorAttribute">
            <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.ReflectionAttributeProvider">
            <summary>
            Provides methods to get attributes from a <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MemberInfo"/>, <see cref="T:System.Reflection.ParameterInfo"/> or <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.ReflectionAttributeProvider.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.ReflectionAttributeProvider"/> class.
            </summary>
            <param name="attributeProvider">The instance to get attributes for. This parameter should be a <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MemberInfo"/>, <see cref="T:System.Reflection.ParameterInfo"/> or <see cref="T:System.Reflection.Assembly"/>.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.ReflectionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using reflection.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.ReflectionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Serialization.SnakeCaseNamingStrategy">
            <summary>
            A snake case naming strategy.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.SnakeCaseNamingStrategy"/> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:NewtonsoftFork.Json.JsonPropertyAttribute"/>.
            </param>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.SnakeCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NewtonsoftFork.Json.Serialization.SnakeCaseNamingStrategy"/> class.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Serialization.SnakeCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:NewtonsoftFork.Json.StringEscapeHandling">
            <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.StringEscapeHandling.Default">
            <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.StringEscapeHandling.EscapeNonAscii">
            <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.StringEscapeHandling.EscapeHtml">
            <summary>
            HTML (&lt;, &gt;, &amp;, &apos;, &quot;) and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="T:NewtonsoftFork.Json.TypeNameHandling">
            <summary>
            Specifies type name handling options for the <see cref="T:NewtonsoftFork.Json.JsonSerializer"/>.
            </summary>
            <remarks>
            <see cref="T:NewtonsoftFork.Json.TypeNameHandling"/> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="T:System.Runtime.Serialization.SerializationBinder"/>
            when deserializing with a value other than <c>TypeNameHandling.None</c>.
            </remarks>
        </member>
        <member name="F:NewtonsoftFork.Json.TypeNameHandling.None">
            <summary>
            Do not include the .NET type name when serializing types.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.TypeNameHandling.Objects">
            <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.TypeNameHandling.Arrays">
            <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.TypeNameHandling.All">
            <summary>
            Always include the .NET type name when serializing.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.TypeNameHandling.Auto">
            <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert or cast the value to.</param>
            <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],NewtonsoftFork.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,NewtonsoftFork.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],NewtonsoftFork.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],NewtonsoftFork.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
            <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.EnumUtils.GetNamesAndValues``1">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <param name="enumType">The enum type to get names and values for.</param>
            <returns></returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
            <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NewtonsoftFork.Json.Utilities.StringBuffer">
            <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
        </member>
        <member name="M:NewtonsoftFork.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NewtonsoftFork.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:NewtonsoftFork.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:NewtonsoftFork.Json.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:NewtonsoftFork.Json.JsonWriter.Close"/> method to put the <see cref="T:NewtonsoftFork.Json.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:NewtonsoftFork.Json.JsonWriter"/> method calls results in an <see cref="T:System.InvalidOperationException"/> being thrown. 
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.WriteState.Closed">
            <summary>
            The <see cref="M:NewtonsoftFork.Json.JsonWriter.Close"/> method has been called. 
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.WriteState.Array">
            <summary>
            A array is being written.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.WriteState.Constructor">
            <summary>
            A constructor is being written.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:NewtonsoftFork.Json.WriteState.Start">
            <summary>
            A write method has not been called.
            </summary>
        </member>
    </members>
</doc>
